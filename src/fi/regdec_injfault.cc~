#include "base/types.hh"
#include "fi/faultq.hh"
#include "fi/regdec_injfault.hh"
#include "fi/fi_system.hh"

using namespace std;

RegisterDecodingInjectedFault::RegisterDecodingInjectedFault( std::ifstream &os)
	:O3CPUInjectedFault(os)
{
	string s;
	os>>s;
	parseRegDec(s);
	fi_system->decodeStageInjectedFaultQueue.insert(this);
	setFaultType(InjectedFault::RegisterDecodingInjectedFault);
}



RegisterDecodingInjectedFault::~RegisterDecodingInjectedFault()
{
}





const char *
RegisterDecodingInjectedFault::description() const
{
    return "RegisterDecodingInjectedFault";
}



void 
RegisterDecodingInjectedFault::dump() const
{
  if (DTRACE(FaultInjection)) {
    std::cout << "===RegisterDecodingInjectedFault::dump()===\n";
    O3CPUInjectedFault::dump();
    std::cout << "\tSrc Or Dst: " << getSrcOrDst() << "\n";
    std::cout << "\tRegister to Change: " << getRegToChange() << "\n";
    std::cout << "\tChange to Reg: " << getChangeToReg() << "\n";
    std::cout << "~==RegisterDecodingInjectedFault::dump()===\n";
  }
}

StaticInstPtr
RegisterDecodingInjectedFault::process(StaticInstPtr staticInst)
{

  if (getSrcOrDst() == RegisterDecodingInjectedFault::SrcRegisterInjectedFault) {
    int rTc = getRegToChange() % staticInst->numSrcRegs(); //Make sure the rTC field of the instruction exists
    if(staticInst->_srcRegIdx[rTc] >= FP_Base_DepTag)
	setChangeToReg(getChangeToReg()+FP_Base_DepTag);
    staticInst->_srcRegIdx[rTc] = getChangeToReg();
  }
  else {
    int rTc = getRegToChange() % staticInst->numDestRegs();
      if(staticInst->_destRegIdx[rTc] >= FP_Base_DepTag)
	setChangeToReg(getChangeToReg()+FP_Base_DepTag);
    staticInst->_destRegIdx[rTc] = getChangeToReg();
  }  
  
  if (DTRACE(FaultInjection)) {
    std::cout << "===RegisterDecodingInjectedFault::process()===\n";
    std::cout <<"Instruction Type : "<<staticInst->getName()<<"\n";;
    dump();
  }
  
  
  check4reschedule();

  if (DTRACE(FaultInjection)) {
    std::cout << "~==RegisterDecodingInjectedFault::process()===\n";
  }
  return staticInst;
}

int
RegisterDecodingInjectedFault::parseRegDec(std::string s)
{
  if (DTRACE(FaultInjection)) {
    std::cout << "RegisterDecodingInjecteFault::parseRegDec()\n";
  }
  size_t pos;

  if (s.compare(0,3,"Src",0,3) == 0) {
    setSrcOrDst(RegisterDecodingInjectedFault::SrcRegisterInjectedFault);
 
    std::string s2 = s.substr(4);
    pos = s2.find_first_of(":");

    setRegToChange(s2.substr(0,pos));
    setChangeToReg(s2.substr(pos+1));
  }
  else if (s.compare(0,3,"Dst",0,3) == 0) {
    setSrcOrDst(RegisterDecodingInjectedFault::DstRegisterInjectedFault);

    std::string s2 = s.substr(4);
    pos = s2.find_first_of(":");

    setRegToChange(s2.substr(0,pos));
    setChangeToReg(s2.substr(pos+1));
    
  }
  else {
    std::cout << "RegisterDecodingInjecteFault::parseRegDec(): " << s << "\n";
    assert(0);
    return 1;
  }
  
  return 0;
}
