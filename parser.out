Created by PLY version 3.2 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file
Rule 1     file -> decls
Rule 2     empty -> <empty>
Rule 3     decls -> declsx
Rule 4     declsx -> decl declsx
Rule 5     declsx -> empty
Rule 6     decl -> PROTOCOL STRING SEMI
Rule 7     decl -> INCLUDE STRING SEMI
Rule 8     decl -> MACHINE ( idents ) : params { decls }
Rule 9     decl -> MACHINE ( idents pairs ) : params { decls }
Rule 10    decl -> ACTION ( ident pairs ) statements
Rule 11    decl -> IN_PORT ( ident , type , var pairs ) statements
Rule 12    decl -> OUT_PORT ( ident , type , var pairs ) SEMI
Rule 13    decl -> TRANS ( idents , idents , ident ) idents
Rule 14    decl -> TRANS ( idents , idents ) idents
Rule 15    decl -> TRANS ( idents , idents , ident ) idents idents
Rule 16    decl -> TRANS ( idents , idents ) idents idents
Rule 17    decl -> EXTERN_TYPE ( type pairs ) SEMI
Rule 18    decl -> GLOBAL ( type pairs ) { type_members }
Rule 19    decl -> STRUCT ( type pairs ) { type_members }
Rule 20    decl -> ENUM ( type pairs ) { type_enums }
Rule 21    decl -> STATE_DECL ( type pairs ) { type_states }
Rule 22    decl -> type ident pairs SEMI
Rule 23    decl -> func_decl
Rule 24    func_decl -> void ident ( params ) pairs SEMI
Rule 25    func_decl -> type ident ( params ) pairs SEMI
Rule 26    decl -> func_def
Rule 27    func_def -> void ident ( params ) pairs statements
Rule 28    func_def -> type ident ( params ) pairs statements
Rule 29    type_members -> type_member type_members
Rule 30    type_members -> empty
Rule 31    type_member -> type_or_void ident ( types ) pairs SEMI
Rule 32    type_member -> type_or_void ident ( params ) pairs statements
Rule 33    type_member -> type_or_void ident pairs SEMI
Rule 34    type_member -> type_or_void ident ASSIGN expr SEMI
Rule 35    type_enums -> type_enum type_enums
Rule 36    type_enums -> empty
Rule 37    type_enum -> ident pairs SEMI
Rule 38    type_states -> type_state type_states
Rule 39    type_states -> empty
Rule 40    type_state -> ident , enumeration pairs SEMI
Rule 41    types -> type , types
Rule 42    types -> type
Rule 43    types -> empty
Rule 44    typestr -> typestr DOUBLE_COLON ident
Rule 45    typestr -> ident
Rule 46    type -> typestr
Rule 47    void -> VOID
Rule 48    type_or_void -> type
Rule 49    type_or_void -> void
Rule 50    params -> param , params
Rule 51    params -> param
Rule 52    params -> empty
Rule 53    param -> type ident
Rule 54    param -> type STAR ident
Rule 55    param -> type STAR ident = STRING
Rule 56    param -> type ident = NUMBER
Rule 57    param -> type ident = LIT_BOOL
Rule 58    param -> type ident = STRING
Rule 59    idents -> { identx }
Rule 60    idents -> ident
Rule 61    identx -> ident SEMI identx
Rule 62    identx -> ident , identx
Rule 63    identx -> ident identx
Rule 64    identx -> empty
Rule 65    ident -> IDENT
Rule 66    pairs -> , pairsx
Rule 67    pairs -> empty
Rule 68    pairsx -> pair , pairsx
Rule 69    pairsx -> pair
Rule 70    pair -> ident = STRING
Rule 71    pair -> ident = ident
Rule 72    pair -> ident = NUMBER
Rule 73    pair -> STRING
Rule 74    statements -> { statements_inner }
Rule 75    statements -> { }
Rule 76    statements_inner -> statement statements_inner
Rule 77    statements_inner -> statement
Rule 78    exprs -> expr , exprs
Rule 79    exprs -> expr
Rule 80    exprs -> empty
Rule 81    statement -> expr SEMI
Rule 82    statement -> expr ASSIGN expr SEMI
Rule 83    statement -> ENQUEUE ( var , type ) statements
Rule 84    statement -> ENQUEUE ( var , type , expr ) statements
Rule 85    statement -> STALL_AND_WAIT ( var , var ) SEMI
Rule 86    statement -> PEEK ( var , type pairs ) statements
Rule 87    statement -> CHECK_ALLOCATE ( var ) SEMI
Rule 88    statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
Rule 89    statement -> RETURN expr SEMI
Rule 90    statement -> if_statement
Rule 91    if_statement -> IF ( expr ) statements
Rule 92    if_statement -> IF ( expr ) statements ELSE statements
Rule 93    if_statement -> IF ( expr ) statements ELSE if_statement
Rule 94    aexpr -> STATIC_CAST ( type , expr )
Rule 95    aexpr -> STATIC_CAST ( type , STRING , expr )
Rule 96    aexpr -> var
Rule 97    aexpr -> type ident
Rule 98    aexpr -> literal
Rule 99    aexpr -> enumeration
Rule 100   aexpr -> ident ( exprs )
Rule 101   aexpr -> NEW type
Rule 102   aexpr -> OOD
Rule 103   aexpr -> aexpr DOT ident
Rule 104   aexpr -> aexpr DOT ident ( exprs )
Rule 105   aexpr -> aexpr [ exprs ]
Rule 106   aexpr -> type DOUBLE_COLON ident ( exprs )
Rule 107   expr -> aexpr
Rule 108   expr -> expr STAR expr
Rule 109   expr -> expr SLASH expr
Rule 110   expr -> expr PLUS expr
Rule 111   expr -> expr DASH expr
Rule 112   expr -> expr LT expr
Rule 113   expr -> expr GT expr
Rule 114   expr -> expr LE expr
Rule 115   expr -> expr GE expr
Rule 116   expr -> expr EQ expr
Rule 117   expr -> expr NE expr
Rule 118   expr -> expr AND expr
Rule 119   expr -> expr OR expr
Rule 120   expr -> expr RIGHTSHIFT expr
Rule 121   expr -> expr LEFTSHIFT expr
Rule 122   expr -> NOT expr
Rule 123   expr -> INCR expr
Rule 124   expr -> DECR expr
Rule 125   expr -> DASH expr
Rule 126   aexpr -> ( expr )
Rule 127   aexpr -> IS_VALID ( var )
Rule 128   aexpr -> IS_INVALID ( var )
Rule 129   literal -> STRING
Rule 130   literal -> NUMBER
Rule 131   literal -> FLOATNUMBER
Rule 132   literal -> LIT_BOOL
Rule 133   enumeration -> ident : ident
Rule 134   var -> ident

Terminals, with rules where they appear

(                    : 8 9 10 11 12 13 14 15 16 17 18 19 20 21 24 25 27 28 31 32 83 84 85 86 87 88 91 92 93 94 95 100 104 106 126 127 128
)                    : 8 9 10 11 12 13 14 15 16 17 18 19 20 21 24 25 27 28 31 32 83 84 85 86 87 88 91 92 93 94 95 100 104 106 126 127 128
,                    : 11 11 12 12 13 13 14 15 15 16 40 41 50 62 66 68 78 83 84 84 85 86 88 88 94 95 95
:                    : 8 9 133
=                    : 55 56 57 58 70 71 72
ACTION               : 10
AND                  : 118
ASSIGN               : 34 82
CHECK_ALLOCATE       : 87
CHECK_STOP_SLOTS     : 88
DASH                 : 111 125
DECR                 : 124
DOT                  : 103 104
DOUBLE_COLON         : 44 106
ELSE                 : 92 93
ENQUEUE              : 83 84
ENUM                 : 20
EQ                   : 116
EXTERN_TYPE          : 17
FLOATNUMBER          : 131
GE                   : 115
GLOBAL               : 18
GT                   : 113
IDENT                : 65
IF                   : 91 92 93
INCLUDE              : 7
INCR                 : 123
IN_PORT              : 11
IS_INVALID           : 128
IS_VALID             : 127
LE                   : 114
LEFTSHIFT            : 121
LIT_BOOL             : 57 132
LT                   : 112
MACHINE              : 8 9
NE                   : 117
NEW                  : 101
NOT                  : 122
NUMBER               : 56 72 130
OOD                  : 102
OR                   : 119
OUT_PORT             : 12
PEEK                 : 86
PLUS                 : 110
PROTOCOL             : 6
RETURN               : 89
RIGHTSHIFT           : 120
SEMI                 : 6 7 12 17 22 24 25 31 33 34 37 40 61 81 82 85 87 88 89
SLASH                : 109
STALL_AND_WAIT       : 85
STAR                 : 54 55 108
STATE_DECL           : 21
STATIC_CAST          : 94 95
STRING               : 6 7 55 58 70 73 88 88 95 129
STRUCT               : 19
TRANS                : 13 14 15 16
VOID                 : 47
[                    : 105
]                    : 105
error                : 
{                    : 8 9 18 19 20 21 59 74 75
}                    : 8 9 18 19 20 21 59 74 75

Nonterminals, with rules where they appear

aexpr                : 103 104 105 107
decl                 : 4
decls                : 1 8 9
declsx               : 3 4
empty                : 5 30 36 39 43 52 64 67 80
enumeration          : 40 99
expr                 : 34 78 79 81 82 82 84 89 91 92 93 94 95 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 123 124 125 126
exprs                : 78 100 104 105 106
file                 : 0
func_decl            : 23
func_def             : 26
ident                : 10 11 12 13 15 22 24 25 27 28 31 32 33 34 37 40 44 45 53 54 55 56 57 58 60 61 62 63 70 71 71 72 97 100 103 104 106 133 133 134
idents               : 8 9 13 13 13 14 14 14 15 15 15 15 16 16 16 16
identx               : 59 61 62 63
if_statement         : 90 93
literal              : 98
pair                 : 68 69
pairs                : 9 10 11 12 17 18 19 20 21 22 24 25 27 28 31 32 33 37 40 86
pairsx               : 66 68
param                : 50 51
params               : 8 9 24 25 27 28 32 50
statement            : 76 77
statements           : 10 11 27 28 32 83 84 86 91 92 92 93
statements_inner     : 74 76
type                 : 11 12 17 18 19 20 21 22 25 28 41 42 48 53 54 55 56 57 58 83 84 86 94 95 97 101 106
type_enum            : 35
type_enums           : 20 35
type_member          : 29
type_members         : 18 19 29
type_or_void         : 31 32 33 34
type_state           : 38
type_states          : 21 38
types                : 31 41
typestr              : 44 46
var                  : 11 12 83 84 85 85 86 87 88 96 127 128
void                 : 24 27 49

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . decls
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( idents ) : params { decls }
    (9) decl -> . MACHINE ( idents pairs ) : params { decls }
    (10) decl -> . ACTION ( ident pairs ) statements
    (11) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (12) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (13) decl -> . TRANS ( idents , idents , ident ) idents
    (14) decl -> . TRANS ( idents , idents ) idents
    (15) decl -> . TRANS ( idents , idents , ident ) idents idents
    (16) decl -> . TRANS ( idents , idents ) idents idents
    (17) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (18) decl -> . GLOBAL ( type pairs ) { type_members }
    (19) decl -> . STRUCT ( type pairs ) { type_members }
    (20) decl -> . ENUM ( type pairs ) { type_enums }
    (21) decl -> . STATE_DECL ( type pairs ) { type_states }
    (22) decl -> . type ident pairs SEMI
    (23) decl -> . func_decl
    (26) decl -> . func_def
    (2) empty -> .
    (46) type -> . typestr
    (24) func_decl -> . void ident ( params ) pairs SEMI
    (25) func_decl -> . type ident ( params ) pairs SEMI
    (27) func_def -> . void ident ( params ) pairs statements
    (28) func_def -> . type ident ( params ) pairs statements
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (47) void -> . VOID
    (65) ident -> . IDENT

    PROTOCOL        shift and go to state 13
    INCLUDE         shift and go to state 20
    MACHINE         shift and go to state 17
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 25
    OUT_PORT        shift and go to state 8
    TRANS           shift and go to state 7
    EXTERN_TYPE     shift and go to state 18
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 22
    ENUM            shift and go to state 16
    STATE_DECL      shift and go to state 23
    $end            reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    declsx                         shift and go to state 12
    func_def                       shift and go to state 14
    void                           shift and go to state 15
    ident                          shift and go to state 21
    file                           shift and go to state 5
    func_decl                      shift and go to state 6
    decls                          shift and go to state 24
    type                           shift and go to state 10
    typestr                        shift and go to state 19
    empty                          shift and go to state 11

state 1

    (4) declsx -> decl . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( idents ) : params { decls }
    (9) decl -> . MACHINE ( idents pairs ) : params { decls }
    (10) decl -> . ACTION ( ident pairs ) statements
    (11) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (12) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (13) decl -> . TRANS ( idents , idents , ident ) idents
    (14) decl -> . TRANS ( idents , idents ) idents
    (15) decl -> . TRANS ( idents , idents , ident ) idents idents
    (16) decl -> . TRANS ( idents , idents ) idents idents
    (17) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (18) decl -> . GLOBAL ( type pairs ) { type_members }
    (19) decl -> . STRUCT ( type pairs ) { type_members }
    (20) decl -> . ENUM ( type pairs ) { type_enums }
    (21) decl -> . STATE_DECL ( type pairs ) { type_states }
    (22) decl -> . type ident pairs SEMI
    (23) decl -> . func_decl
    (26) decl -> . func_def
    (2) empty -> .
    (46) type -> . typestr
    (24) func_decl -> . void ident ( params ) pairs SEMI
    (25) func_decl -> . type ident ( params ) pairs SEMI
    (27) func_def -> . void ident ( params ) pairs statements
    (28) func_def -> . type ident ( params ) pairs statements
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (47) void -> . VOID
    (65) ident -> . IDENT

    PROTOCOL        shift and go to state 13
    INCLUDE         shift and go to state 20
    MACHINE         shift and go to state 17
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 25
    OUT_PORT        shift and go to state 8
    TRANS           shift and go to state 7
    EXTERN_TYPE     shift and go to state 18
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 22
    ENUM            shift and go to state 16
    STATE_DECL      shift and go to state 23
    $end            reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    declsx                         shift and go to state 26
    func_def                       shift and go to state 14
    void                           shift and go to state 15
    ident                          shift and go to state 21
    func_decl                      shift and go to state 6
    type                           shift and go to state 10
    typestr                        shift and go to state 19
    empty                          shift and go to state 11

state 2

    (47) void -> VOID .

    IDENT           reduce using rule 47 (void -> VOID .)


state 3

    (18) decl -> GLOBAL . ( type pairs ) { type_members }

    (               shift and go to state 27


state 4

    (65) ident -> IDENT .

    DOUBLE_COLON    reduce using rule 65 (ident -> IDENT .)
    ,               reduce using rule 65 (ident -> IDENT .)
    {               reduce using rule 65 (ident -> IDENT .)
    IDENT           reduce using rule 65 (ident -> IDENT .)
    PROTOCOL        reduce using rule 65 (ident -> IDENT .)
    INCLUDE         reduce using rule 65 (ident -> IDENT .)
    MACHINE         reduce using rule 65 (ident -> IDENT .)
    ACTION          reduce using rule 65 (ident -> IDENT .)
    IN_PORT         reduce using rule 65 (ident -> IDENT .)
    OUT_PORT        reduce using rule 65 (ident -> IDENT .)
    TRANS           reduce using rule 65 (ident -> IDENT .)
    EXTERN_TYPE     reduce using rule 65 (ident -> IDENT .)
    GLOBAL          reduce using rule 65 (ident -> IDENT .)
    STRUCT          reduce using rule 65 (ident -> IDENT .)
    ENUM            reduce using rule 65 (ident -> IDENT .)
    STATE_DECL      reduce using rule 65 (ident -> IDENT .)
    VOID            reduce using rule 65 (ident -> IDENT .)
    $end            reduce using rule 65 (ident -> IDENT .)
    }               reduce using rule 65 (ident -> IDENT .)
    SEMI            reduce using rule 65 (ident -> IDENT .)
    )               reduce using rule 65 (ident -> IDENT .)
    STAR            reduce using rule 65 (ident -> IDENT .)
    (               reduce using rule 65 (ident -> IDENT .)
    :               reduce using rule 65 (ident -> IDENT .)
    DOT             reduce using rule 65 (ident -> IDENT .)
    [               reduce using rule 65 (ident -> IDENT .)
    SLASH           reduce using rule 65 (ident -> IDENT .)
    PLUS            reduce using rule 65 (ident -> IDENT .)
    DASH            reduce using rule 65 (ident -> IDENT .)
    LT              reduce using rule 65 (ident -> IDENT .)
    GT              reduce using rule 65 (ident -> IDENT .)
    LE              reduce using rule 65 (ident -> IDENT .)
    GE              reduce using rule 65 (ident -> IDENT .)
    EQ              reduce using rule 65 (ident -> IDENT .)
    NE              reduce using rule 65 (ident -> IDENT .)
    AND             reduce using rule 65 (ident -> IDENT .)
    OR              reduce using rule 65 (ident -> IDENT .)
    RIGHTSHIFT      reduce using rule 65 (ident -> IDENT .)
    LEFTSHIFT       reduce using rule 65 (ident -> IDENT .)
    ASSIGN          reduce using rule 65 (ident -> IDENT .)
    ]               reduce using rule 65 (ident -> IDENT .)
    =               reduce using rule 65 (ident -> IDENT .)


state 5

    (0) S' -> file .



state 6

    (23) decl -> func_decl .

    PROTOCOL        reduce using rule 23 (decl -> func_decl .)
    INCLUDE         reduce using rule 23 (decl -> func_decl .)
    MACHINE         reduce using rule 23 (decl -> func_decl .)
    ACTION          reduce using rule 23 (decl -> func_decl .)
    IN_PORT         reduce using rule 23 (decl -> func_decl .)
    OUT_PORT        reduce using rule 23 (decl -> func_decl .)
    TRANS           reduce using rule 23 (decl -> func_decl .)
    EXTERN_TYPE     reduce using rule 23 (decl -> func_decl .)
    GLOBAL          reduce using rule 23 (decl -> func_decl .)
    STRUCT          reduce using rule 23 (decl -> func_decl .)
    ENUM            reduce using rule 23 (decl -> func_decl .)
    STATE_DECL      reduce using rule 23 (decl -> func_decl .)
    VOID            reduce using rule 23 (decl -> func_decl .)
    IDENT           reduce using rule 23 (decl -> func_decl .)
    $end            reduce using rule 23 (decl -> func_decl .)
    }               reduce using rule 23 (decl -> func_decl .)


state 7

    (13) decl -> TRANS . ( idents , idents , ident ) idents
    (14) decl -> TRANS . ( idents , idents ) idents
    (15) decl -> TRANS . ( idents , idents , ident ) idents idents
    (16) decl -> TRANS . ( idents , idents ) idents idents

    (               shift and go to state 28


state 8

    (12) decl -> OUT_PORT . ( ident , type , var pairs ) SEMI

    (               shift and go to state 29


state 9

    (10) decl -> ACTION . ( ident pairs ) statements

    (               shift and go to state 30


state 10

    (22) decl -> type . ident pairs SEMI
    (25) func_decl -> type . ident ( params ) pairs SEMI
    (28) func_def -> type . ident ( params ) pairs statements
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 31

state 11

    (5) declsx -> empty .

    }               reduce using rule 5 (declsx -> empty .)
    $end            reduce using rule 5 (declsx -> empty .)


state 12

    (3) decls -> declsx .

    }               reduce using rule 3 (decls -> declsx .)
    $end            reduce using rule 3 (decls -> declsx .)


state 13

    (6) decl -> PROTOCOL . STRING SEMI

    STRING          shift and go to state 32


state 14

    (26) decl -> func_def .

    PROTOCOL        reduce using rule 26 (decl -> func_def .)
    INCLUDE         reduce using rule 26 (decl -> func_def .)
    MACHINE         reduce using rule 26 (decl -> func_def .)
    ACTION          reduce using rule 26 (decl -> func_def .)
    IN_PORT         reduce using rule 26 (decl -> func_def .)
    OUT_PORT        reduce using rule 26 (decl -> func_def .)
    TRANS           reduce using rule 26 (decl -> func_def .)
    EXTERN_TYPE     reduce using rule 26 (decl -> func_def .)
    GLOBAL          reduce using rule 26 (decl -> func_def .)
    STRUCT          reduce using rule 26 (decl -> func_def .)
    ENUM            reduce using rule 26 (decl -> func_def .)
    STATE_DECL      reduce using rule 26 (decl -> func_def .)
    VOID            reduce using rule 26 (decl -> func_def .)
    IDENT           reduce using rule 26 (decl -> func_def .)
    $end            reduce using rule 26 (decl -> func_def .)
    }               reduce using rule 26 (decl -> func_def .)


state 15

    (24) func_decl -> void . ident ( params ) pairs SEMI
    (27) func_def -> void . ident ( params ) pairs statements
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 33

state 16

    (20) decl -> ENUM . ( type pairs ) { type_enums }

    (               shift and go to state 34


state 17

    (8) decl -> MACHINE . ( idents ) : params { decls }
    (9) decl -> MACHINE . ( idents pairs ) : params { decls }

    (               shift and go to state 35


state 18

    (17) decl -> EXTERN_TYPE . ( type pairs ) SEMI

    (               shift and go to state 36


state 19

    (46) type -> typestr .
    (44) typestr -> typestr . DOUBLE_COLON ident

  ! shift/reduce conflict for DOUBLE_COLON resolved as shift
    IDENT           reduce using rule 46 (type -> typestr .)
    DOT             reduce using rule 46 (type -> typestr .)
    [               reduce using rule 46 (type -> typestr .)
    SEMI            reduce using rule 46 (type -> typestr .)
    ASSIGN          reduce using rule 46 (type -> typestr .)
    STAR            reduce using rule 46 (type -> typestr .)
    SLASH           reduce using rule 46 (type -> typestr .)
    PLUS            reduce using rule 46 (type -> typestr .)
    DASH            reduce using rule 46 (type -> typestr .)
    LT              reduce using rule 46 (type -> typestr .)
    GT              reduce using rule 46 (type -> typestr .)
    LE              reduce using rule 46 (type -> typestr .)
    GE              reduce using rule 46 (type -> typestr .)
    EQ              reduce using rule 46 (type -> typestr .)
    NE              reduce using rule 46 (type -> typestr .)
    AND             reduce using rule 46 (type -> typestr .)
    OR              reduce using rule 46 (type -> typestr .)
    RIGHTSHIFT      reduce using rule 46 (type -> typestr .)
    LEFTSHIFT       reduce using rule 46 (type -> typestr .)
    )               reduce using rule 46 (type -> typestr .)
    ,               reduce using rule 46 (type -> typestr .)
    ]               reduce using rule 46 (type -> typestr .)
    DOUBLE_COLON    shift and go to state 37

  ! DOUBLE_COLON    [ reduce using rule 46 (type -> typestr .) ]


state 20

    (7) decl -> INCLUDE . STRING SEMI

    STRING          shift and go to state 38


state 21

    (45) typestr -> ident .

    DOUBLE_COLON    reduce using rule 45 (typestr -> ident .)
    STAR            reduce using rule 45 (typestr -> ident .)
    IDENT           reduce using rule 45 (typestr -> ident .)
    ,               reduce using rule 45 (typestr -> ident .)
    )               reduce using rule 45 (typestr -> ident .)
    DOT             reduce using rule 45 (typestr -> ident .)
    [               reduce using rule 45 (typestr -> ident .)
    SEMI            reduce using rule 45 (typestr -> ident .)
    ASSIGN          reduce using rule 45 (typestr -> ident .)
    SLASH           reduce using rule 45 (typestr -> ident .)
    PLUS            reduce using rule 45 (typestr -> ident .)
    DASH            reduce using rule 45 (typestr -> ident .)
    LT              reduce using rule 45 (typestr -> ident .)
    GT              reduce using rule 45 (typestr -> ident .)
    LE              reduce using rule 45 (typestr -> ident .)
    GE              reduce using rule 45 (typestr -> ident .)
    EQ              reduce using rule 45 (typestr -> ident .)
    NE              reduce using rule 45 (typestr -> ident .)
    AND             reduce using rule 45 (typestr -> ident .)
    OR              reduce using rule 45 (typestr -> ident .)
    RIGHTSHIFT      reduce using rule 45 (typestr -> ident .)
    LEFTSHIFT       reduce using rule 45 (typestr -> ident .)
    ]               reduce using rule 45 (typestr -> ident .)


state 22

    (19) decl -> STRUCT . ( type pairs ) { type_members }

    (               shift and go to state 39


state 23

    (21) decl -> STATE_DECL . ( type pairs ) { type_states }

    (               shift and go to state 40


state 24

    (1) file -> decls .

    $end            reduce using rule 1 (file -> decls .)


state 25

    (11) decl -> IN_PORT . ( ident , type , var pairs ) statements

    (               shift and go to state 41


state 26

    (4) declsx -> decl declsx .

    }               reduce using rule 4 (declsx -> decl declsx .)
    $end            reduce using rule 4 (declsx -> decl declsx .)


state 27

    (18) decl -> GLOBAL ( . type pairs ) { type_members }
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 42
    typestr                        shift and go to state 19

state 28

    (13) decl -> TRANS ( . idents , idents , ident ) idents
    (14) decl -> TRANS ( . idents , idents ) idents
    (15) decl -> TRANS ( . idents , idents , ident ) idents idents
    (16) decl -> TRANS ( . idents , idents ) idents idents
    (59) idents -> . { identx }
    (60) idents -> . ident
    (65) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 44

state 29

    (12) decl -> OUT_PORT ( . ident , type , var pairs ) SEMI
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 46

state 30

    (10) decl -> ACTION ( . ident pairs ) statements
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 47

state 31

    (22) decl -> type ident . pairs SEMI
    (25) func_decl -> type ident . ( params ) pairs SEMI
    (28) func_def -> type ident . ( params ) pairs statements
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    (               shift and go to state 49
    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 48
    empty                          shift and go to state 51

state 32

    (6) decl -> PROTOCOL STRING . SEMI

    SEMI            shift and go to state 52


state 33

    (24) func_decl -> void ident . ( params ) pairs SEMI
    (27) func_def -> void ident . ( params ) pairs statements

    (               shift and go to state 53


state 34

    (20) decl -> ENUM ( . type pairs ) { type_enums }
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 54
    typestr                        shift and go to state 19

state 35

    (8) decl -> MACHINE ( . idents ) : params { decls }
    (9) decl -> MACHINE ( . idents pairs ) : params { decls }
    (59) idents -> . { identx }
    (60) idents -> . ident
    (65) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 55

state 36

    (17) decl -> EXTERN_TYPE ( . type pairs ) SEMI
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 56
    typestr                        shift and go to state 19

state 37

    (44) typestr -> typestr DOUBLE_COLON . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 57

state 38

    (7) decl -> INCLUDE STRING . SEMI

    SEMI            shift and go to state 58


state 39

    (19) decl -> STRUCT ( . type pairs ) { type_members }
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 59
    typestr                        shift and go to state 19

state 40

    (21) decl -> STATE_DECL ( . type pairs ) { type_states }
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 60
    typestr                        shift and go to state 19

state 41

    (11) decl -> IN_PORT ( . ident , type , var pairs ) statements
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 61

state 42

    (18) decl -> GLOBAL ( type . pairs ) { type_members }
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 62
    empty                          shift and go to state 51

state 43

    (60) idents -> ident .

    {               reduce using rule 60 (idents -> ident .)
    IDENT           reduce using rule 60 (idents -> ident .)
    PROTOCOL        reduce using rule 60 (idents -> ident .)
    INCLUDE         reduce using rule 60 (idents -> ident .)
    MACHINE         reduce using rule 60 (idents -> ident .)
    ACTION          reduce using rule 60 (idents -> ident .)
    IN_PORT         reduce using rule 60 (idents -> ident .)
    OUT_PORT        reduce using rule 60 (idents -> ident .)
    TRANS           reduce using rule 60 (idents -> ident .)
    EXTERN_TYPE     reduce using rule 60 (idents -> ident .)
    GLOBAL          reduce using rule 60 (idents -> ident .)
    STRUCT          reduce using rule 60 (idents -> ident .)
    ENUM            reduce using rule 60 (idents -> ident .)
    STATE_DECL      reduce using rule 60 (idents -> ident .)
    VOID            reduce using rule 60 (idents -> ident .)
    $end            reduce using rule 60 (idents -> ident .)
    }               reduce using rule 60 (idents -> ident .)
    ,               reduce using rule 60 (idents -> ident .)
    )               reduce using rule 60 (idents -> ident .)


state 44

    (13) decl -> TRANS ( idents . , idents , ident ) idents
    (14) decl -> TRANS ( idents . , idents ) idents
    (15) decl -> TRANS ( idents . , idents , ident ) idents idents
    (16) decl -> TRANS ( idents . , idents ) idents idents

    ,               shift and go to state 63


state 45

    (59) idents -> { . identx }
    (61) identx -> . ident SEMI identx
    (62) identx -> . ident , identx
    (63) identx -> . ident identx
    (64) identx -> . empty
    (65) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 64
    identx                         shift and go to state 65
    empty                          shift and go to state 66

state 46

    (12) decl -> OUT_PORT ( ident . , type , var pairs ) SEMI

    ,               shift and go to state 67


state 47

    (10) decl -> ACTION ( ident . pairs ) statements
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 68
    empty                          shift and go to state 51

state 48

    (22) decl -> type ident pairs . SEMI

    SEMI            shift and go to state 69


state 49

    (25) func_decl -> type ident ( . params ) pairs SEMI
    (28) func_def -> type ident ( . params ) pairs statements
    (50) params -> . param , params
    (51) params -> . param
    (52) params -> . empty
    (53) param -> . type ident
    (54) param -> . type STAR ident
    (55) param -> . type STAR ident = STRING
    (56) param -> . type ident = NUMBER
    (57) param -> . type ident = LIT_BOOL
    (58) param -> . type ident = STRING
    (2) empty -> .
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 71
    typestr                        shift and go to state 19
    type                           shift and go to state 72
    empty                          shift and go to state 73

state 50

    (66) pairs -> , . pairsx
    (68) pairsx -> . pair , pairsx
    (69) pairsx -> . pair
    (70) pair -> . ident = STRING
    (71) pair -> . ident = ident
    (72) pair -> . ident = NUMBER
    (73) pair -> . STRING
    (65) ident -> . IDENT

    STRING          shift and go to state 75
    IDENT           shift and go to state 4

    pair                           shift and go to state 77
    ident                          shift and go to state 74
    pairsx                         shift and go to state 76

state 51

    (67) pairs -> empty .

    )               reduce using rule 67 (pairs -> empty .)
    SEMI            reduce using rule 67 (pairs -> empty .)
    {               reduce using rule 67 (pairs -> empty .)


state 52

    (6) decl -> PROTOCOL STRING SEMI .

    PROTOCOL        reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    INCLUDE         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    MACHINE         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    ACTION          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    IN_PORT         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    OUT_PORT        reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    TRANS           reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    EXTERN_TYPE     reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    GLOBAL          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    STRUCT          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    ENUM            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    STATE_DECL      reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    VOID            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    IDENT           reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    $end            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    }               reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)


state 53

    (24) func_decl -> void ident ( . params ) pairs SEMI
    (27) func_def -> void ident ( . params ) pairs statements
    (50) params -> . param , params
    (51) params -> . param
    (52) params -> . empty
    (53) param -> . type ident
    (54) param -> . type STAR ident
    (55) param -> . type STAR ident = STRING
    (56) param -> . type ident = NUMBER
    (57) param -> . type ident = LIT_BOOL
    (58) param -> . type ident = STRING
    (2) empty -> .
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 78
    typestr                        shift and go to state 19
    type                           shift and go to state 72
    empty                          shift and go to state 73

state 54

    (20) decl -> ENUM ( type . pairs ) { type_enums }
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 79
    empty                          shift and go to state 51

state 55

    (8) decl -> MACHINE ( idents . ) : params { decls }
    (9) decl -> MACHINE ( idents . pairs ) : params { decls }
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 81
    ,               shift and go to state 50

  ! )               [ reduce using rule 2 (empty -> .) ]

    pairs                          shift and go to state 80
    empty                          shift and go to state 51

state 56

    (17) decl -> EXTERN_TYPE ( type . pairs ) SEMI
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 82
    empty                          shift and go to state 51

state 57

    (44) typestr -> typestr DOUBLE_COLON ident .

    DOUBLE_COLON    reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    IDENT           reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    STAR            reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    ,               reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    )               reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    DOT             reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    [               reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    SEMI            reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    ASSIGN          reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    SLASH           reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    PLUS            reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    DASH            reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    LT              reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    GT              reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    LE              reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    GE              reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    EQ              reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    NE              reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    AND             reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    OR              reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    RIGHTSHIFT      reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    LEFTSHIFT       reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)
    ]               reduce using rule 44 (typestr -> typestr DOUBLE_COLON ident .)


state 58

    (7) decl -> INCLUDE STRING SEMI .

    PROTOCOL        reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    INCLUDE         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    MACHINE         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    ACTION          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    IN_PORT         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    OUT_PORT        reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    TRANS           reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    EXTERN_TYPE     reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    GLOBAL          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    STRUCT          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    ENUM            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    STATE_DECL      reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    VOID            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    IDENT           reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    $end            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    }               reduce using rule 7 (decl -> INCLUDE STRING SEMI .)


state 59

    (19) decl -> STRUCT ( type . pairs ) { type_members }
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 83
    empty                          shift and go to state 51

state 60

    (21) decl -> STATE_DECL ( type . pairs ) { type_states }
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 84
    empty                          shift and go to state 51

state 61

    (11) decl -> IN_PORT ( ident . , type , var pairs ) statements

    ,               shift and go to state 85


state 62

    (18) decl -> GLOBAL ( type pairs . ) { type_members }

    )               shift and go to state 86


state 63

    (13) decl -> TRANS ( idents , . idents , ident ) idents
    (14) decl -> TRANS ( idents , . idents ) idents
    (15) decl -> TRANS ( idents , . idents , ident ) idents idents
    (16) decl -> TRANS ( idents , . idents ) idents idents
    (59) idents -> . { identx }
    (60) idents -> . ident
    (65) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 87

state 64

    (61) identx -> ident . SEMI identx
    (62) identx -> ident . , identx
    (63) identx -> ident . identx
    (61) identx -> . ident SEMI identx
    (62) identx -> . ident , identx
    (63) identx -> . ident identx
    (64) identx -> . empty
    (65) ident -> . IDENT
    (2) empty -> .

    SEMI            shift and go to state 88
    ,               shift and go to state 90
    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 64
    identx                         shift and go to state 89
    empty                          shift and go to state 66

state 65

    (59) idents -> { identx . }

    }               shift and go to state 91


state 66

    (64) identx -> empty .

    }               reduce using rule 64 (identx -> empty .)


state 67

    (12) decl -> OUT_PORT ( ident , . type , var pairs ) SEMI
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 92
    typestr                        shift and go to state 19

state 68

    (10) decl -> ACTION ( ident pairs . ) statements

    )               shift and go to state 93


state 69

    (22) decl -> type ident pairs SEMI .

    PROTOCOL        reduce using rule 22 (decl -> type ident pairs SEMI .)
    INCLUDE         reduce using rule 22 (decl -> type ident pairs SEMI .)
    MACHINE         reduce using rule 22 (decl -> type ident pairs SEMI .)
    ACTION          reduce using rule 22 (decl -> type ident pairs SEMI .)
    IN_PORT         reduce using rule 22 (decl -> type ident pairs SEMI .)
    OUT_PORT        reduce using rule 22 (decl -> type ident pairs SEMI .)
    TRANS           reduce using rule 22 (decl -> type ident pairs SEMI .)
    EXTERN_TYPE     reduce using rule 22 (decl -> type ident pairs SEMI .)
    GLOBAL          reduce using rule 22 (decl -> type ident pairs SEMI .)
    STRUCT          reduce using rule 22 (decl -> type ident pairs SEMI .)
    ENUM            reduce using rule 22 (decl -> type ident pairs SEMI .)
    STATE_DECL      reduce using rule 22 (decl -> type ident pairs SEMI .)
    VOID            reduce using rule 22 (decl -> type ident pairs SEMI .)
    IDENT           reduce using rule 22 (decl -> type ident pairs SEMI .)
    $end            reduce using rule 22 (decl -> type ident pairs SEMI .)
    }               reduce using rule 22 (decl -> type ident pairs SEMI .)


state 70

    (50) params -> param . , params
    (51) params -> param .

    ,               shift and go to state 94
    )               reduce using rule 51 (params -> param .)
    {               reduce using rule 51 (params -> param .)


state 71

    (25) func_decl -> type ident ( params . ) pairs SEMI
    (28) func_def -> type ident ( params . ) pairs statements

    )               shift and go to state 95


state 72

    (53) param -> type . ident
    (54) param -> type . STAR ident
    (55) param -> type . STAR ident = STRING
    (56) param -> type . ident = NUMBER
    (57) param -> type . ident = LIT_BOOL
    (58) param -> type . ident = STRING
    (65) ident -> . IDENT

    STAR            shift and go to state 97
    IDENT           shift and go to state 4

    ident                          shift and go to state 96

state 73

    (52) params -> empty .

    {               reduce using rule 52 (params -> empty .)
    )               reduce using rule 52 (params -> empty .)


state 74

    (70) pair -> ident . = STRING
    (71) pair -> ident . = ident
    (72) pair -> ident . = NUMBER

    =               shift and go to state 98


state 75

    (73) pair -> STRING .

    ,               reduce using rule 73 (pair -> STRING .)
    SEMI            reduce using rule 73 (pair -> STRING .)
    )               reduce using rule 73 (pair -> STRING .)
    {               reduce using rule 73 (pair -> STRING .)


state 76

    (66) pairs -> , pairsx .

    )               reduce using rule 66 (pairs -> , pairsx .)
    SEMI            reduce using rule 66 (pairs -> , pairsx .)
    {               reduce using rule 66 (pairs -> , pairsx .)


state 77

    (68) pairsx -> pair . , pairsx
    (69) pairsx -> pair .

    ,               shift and go to state 99
    SEMI            reduce using rule 69 (pairsx -> pair .)
    )               reduce using rule 69 (pairsx -> pair .)
    {               reduce using rule 69 (pairsx -> pair .)


state 78

    (24) func_decl -> void ident ( params . ) pairs SEMI
    (27) func_def -> void ident ( params . ) pairs statements

    )               shift and go to state 100


state 79

    (20) decl -> ENUM ( type pairs . ) { type_enums }

    )               shift and go to state 101


state 80

    (9) decl -> MACHINE ( idents pairs . ) : params { decls }

    )               shift and go to state 102


state 81

    (8) decl -> MACHINE ( idents ) . : params { decls }

    :               shift and go to state 103


state 82

    (17) decl -> EXTERN_TYPE ( type pairs . ) SEMI

    )               shift and go to state 104


state 83

    (19) decl -> STRUCT ( type pairs . ) { type_members }

    )               shift and go to state 105


state 84

    (21) decl -> STATE_DECL ( type pairs . ) { type_states }

    )               shift and go to state 106


state 85

    (11) decl -> IN_PORT ( ident , . type , var pairs ) statements
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    typestr                        shift and go to state 19
    type                           shift and go to state 107

state 86

    (18) decl -> GLOBAL ( type pairs ) . { type_members }

    {               shift and go to state 108


state 87

    (13) decl -> TRANS ( idents , idents . , ident ) idents
    (14) decl -> TRANS ( idents , idents . ) idents
    (15) decl -> TRANS ( idents , idents . , ident ) idents idents
    (16) decl -> TRANS ( idents , idents . ) idents idents

    ,               shift and go to state 110
    )               shift and go to state 109


state 88

    (61) identx -> ident SEMI . identx
    (61) identx -> . ident SEMI identx
    (62) identx -> . ident , identx
    (63) identx -> . ident identx
    (64) identx -> . empty
    (65) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 64
    identx                         shift and go to state 111
    empty                          shift and go to state 66

state 89

    (63) identx -> ident identx .

    }               reduce using rule 63 (identx -> ident identx .)


state 90

    (62) identx -> ident , . identx
    (61) identx -> . ident SEMI identx
    (62) identx -> . ident , identx
    (63) identx -> . ident identx
    (64) identx -> . empty
    (65) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 64
    identx                         shift and go to state 112
    empty                          shift and go to state 66

state 91

    (59) idents -> { identx } .

    {               reduce using rule 59 (idents -> { identx } .)
    IDENT           reduce using rule 59 (idents -> { identx } .)
    PROTOCOL        reduce using rule 59 (idents -> { identx } .)
    INCLUDE         reduce using rule 59 (idents -> { identx } .)
    MACHINE         reduce using rule 59 (idents -> { identx } .)
    ACTION          reduce using rule 59 (idents -> { identx } .)
    IN_PORT         reduce using rule 59 (idents -> { identx } .)
    OUT_PORT        reduce using rule 59 (idents -> { identx } .)
    TRANS           reduce using rule 59 (idents -> { identx } .)
    EXTERN_TYPE     reduce using rule 59 (idents -> { identx } .)
    GLOBAL          reduce using rule 59 (idents -> { identx } .)
    STRUCT          reduce using rule 59 (idents -> { identx } .)
    ENUM            reduce using rule 59 (idents -> { identx } .)
    STATE_DECL      reduce using rule 59 (idents -> { identx } .)
    VOID            reduce using rule 59 (idents -> { identx } .)
    $end            reduce using rule 59 (idents -> { identx } .)
    }               reduce using rule 59 (idents -> { identx } .)
    ,               reduce using rule 59 (idents -> { identx } .)
    )               reduce using rule 59 (idents -> { identx } .)


state 92

    (12) decl -> OUT_PORT ( ident , type . , var pairs ) SEMI

    ,               shift and go to state 113


state 93

    (10) decl -> ACTION ( ident pairs ) . statements
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    {               shift and go to state 115

    statements                     shift and go to state 114

state 94

    (50) params -> param , . params
    (50) params -> . param , params
    (51) params -> . param
    (52) params -> . empty
    (53) param -> . type ident
    (54) param -> . type STAR ident
    (55) param -> . type STAR ident = STRING
    (56) param -> . type ident = NUMBER
    (57) param -> . type ident = LIT_BOOL
    (58) param -> . type ident = STRING
    (2) empty -> .
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 116
    typestr                        shift and go to state 19
    type                           shift and go to state 72
    empty                          shift and go to state 73

state 95

    (25) func_decl -> type ident ( params ) . pairs SEMI
    (28) func_def -> type ident ( params ) . pairs statements
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 117
    empty                          shift and go to state 51

state 96

    (53) param -> type ident .
    (56) param -> type ident . = NUMBER
    (57) param -> type ident . = LIT_BOOL
    (58) param -> type ident . = STRING

    ,               reduce using rule 53 (param -> type ident .)
    )               reduce using rule 53 (param -> type ident .)
    {               reduce using rule 53 (param -> type ident .)
    =               shift and go to state 118


state 97

    (54) param -> type STAR . ident
    (55) param -> type STAR . ident = STRING
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 119

state 98

    (70) pair -> ident = . STRING
    (71) pair -> ident = . ident
    (72) pair -> ident = . NUMBER
    (65) ident -> . IDENT

    STRING          shift and go to state 121
    NUMBER          shift and go to state 122
    IDENT           shift and go to state 4

    ident                          shift and go to state 120

state 99

    (68) pairsx -> pair , . pairsx
    (68) pairsx -> . pair , pairsx
    (69) pairsx -> . pair
    (70) pair -> . ident = STRING
    (71) pair -> . ident = ident
    (72) pair -> . ident = NUMBER
    (73) pair -> . STRING
    (65) ident -> . IDENT

    STRING          shift and go to state 75
    IDENT           shift and go to state 4

    pair                           shift and go to state 77
    ident                          shift and go to state 74
    pairsx                         shift and go to state 123

state 100

    (24) func_decl -> void ident ( params ) . pairs SEMI
    (27) func_def -> void ident ( params ) . pairs statements
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 124
    empty                          shift and go to state 51

state 101

    (20) decl -> ENUM ( type pairs ) . { type_enums }

    {               shift and go to state 125


state 102

    (9) decl -> MACHINE ( idents pairs ) . : params { decls }

    :               shift and go to state 126


state 103

    (8) decl -> MACHINE ( idents ) : . params { decls }
    (50) params -> . param , params
    (51) params -> . param
    (52) params -> . empty
    (53) param -> . type ident
    (54) param -> . type STAR ident
    (55) param -> . type STAR ident = STRING
    (56) param -> . type ident = NUMBER
    (57) param -> . type ident = LIT_BOOL
    (58) param -> . type ident = STRING
    (2) empty -> .
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 127
    type                           shift and go to state 72
    typestr                        shift and go to state 19
    empty                          shift and go to state 73

state 104

    (17) decl -> EXTERN_TYPE ( type pairs ) . SEMI

    SEMI            shift and go to state 128


state 105

    (19) decl -> STRUCT ( type pairs ) . { type_members }

    {               shift and go to state 129


state 106

    (21) decl -> STATE_DECL ( type pairs ) . { type_states }

    {               shift and go to state 130


state 107

    (11) decl -> IN_PORT ( ident , type . , var pairs ) statements

    ,               shift and go to state 131


state 108

    (18) decl -> GLOBAL ( type pairs ) { . type_members }
    (29) type_members -> . type_member type_members
    (30) type_members -> . empty
    (31) type_member -> . type_or_void ident ( types ) pairs SEMI
    (32) type_member -> . type_or_void ident ( params ) pairs statements
    (33) type_member -> . type_or_void ident pairs SEMI
    (34) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (48) type_or_void -> . type
    (49) type_or_void -> . void
    (46) type -> . typestr
    (47) void -> . VOID
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    void                           shift and go to state 137
    type_members                   shift and go to state 132
    type_member                    shift and go to state 133
    type                           shift and go to state 135
    type_or_void                   shift and go to state 134
    empty                          shift and go to state 136

state 109

    (14) decl -> TRANS ( idents , idents ) . idents
    (16) decl -> TRANS ( idents , idents ) . idents idents
    (59) idents -> . { identx }
    (60) idents -> . ident
    (65) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 138

state 110

    (13) decl -> TRANS ( idents , idents , . ident ) idents
    (15) decl -> TRANS ( idents , idents , . ident ) idents idents
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 139

state 111

    (61) identx -> ident SEMI identx .

    }               reduce using rule 61 (identx -> ident SEMI identx .)


state 112

    (62) identx -> ident , identx .

    }               reduce using rule 62 (identx -> ident , identx .)


state 113

    (12) decl -> OUT_PORT ( ident , type , . var pairs ) SEMI
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 141
    ident                          shift and go to state 140

state 114

    (10) decl -> ACTION ( ident pairs ) statements .

    PROTOCOL        reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    INCLUDE         reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    MACHINE         reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    ACTION          reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    IN_PORT         reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    OUT_PORT        reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    TRANS           reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    EXTERN_TYPE     reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    GLOBAL          reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    STRUCT          reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    ENUM            reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    STATE_DECL      reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    VOID            reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    IDENT           reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    $end            reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    }               reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)


state 115

    (74) statements -> { . statements_inner }
    (75) statements -> { . }
    (76) statements_inner -> . statement statements_inner
    (77) statements_inner -> . statement
    (81) statement -> . expr SEMI
    (82) statement -> . expr ASSIGN expr SEMI
    (83) statement -> . ENQUEUE ( var , type ) statements
    (84) statement -> . ENQUEUE ( var , type , expr ) statements
    (85) statement -> . STALL_AND_WAIT ( var , var ) SEMI
    (86) statement -> . PEEK ( var , type pairs ) statements
    (87) statement -> . CHECK_ALLOCATE ( var ) SEMI
    (88) statement -> . CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
    (89) statement -> . RETURN expr SEMI
    (90) statement -> . if_statement
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (91) if_statement -> . IF ( expr ) statements
    (92) if_statement -> . IF ( expr ) statements ELSE statements
    (93) if_statement -> . IF ( expr ) statements ELSE if_statement
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    }               shift and go to state 173
    ENQUEUE         shift and go to state 156
    STALL_AND_WAIT  shift and go to state 162
    PEEK            shift and go to state 142
    CHECK_ALLOCATE  shift and go to state 152
    CHECK_STOP_SLOTS shift and go to state 171
    RETURN          shift and go to state 143
    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    IF              shift and go to state 165
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 168
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    statements_inner               shift and go to state 146
    statement                      shift and go to state 157
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    if_statement                   shift and go to state 159
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 116

    (50) params -> param , params .

    )               reduce using rule 50 (params -> param , params .)
    {               reduce using rule 50 (params -> param , params .)


state 117

    (25) func_decl -> type ident ( params ) pairs . SEMI
    (28) func_def -> type ident ( params ) pairs . statements
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    SEMI            shift and go to state 175
    {               shift and go to state 115

    statements                     shift and go to state 174

state 118

    (56) param -> type ident = . NUMBER
    (57) param -> type ident = . LIT_BOOL
    (58) param -> type ident = . STRING

    NUMBER          shift and go to state 177
    LIT_BOOL        shift and go to state 178
    STRING          shift and go to state 176


state 119

    (54) param -> type STAR ident .
    (55) param -> type STAR ident . = STRING

    ,               reduce using rule 54 (param -> type STAR ident .)
    )               reduce using rule 54 (param -> type STAR ident .)
    {               reduce using rule 54 (param -> type STAR ident .)
    =               shift and go to state 179


state 120

    (71) pair -> ident = ident .

    ,               reduce using rule 71 (pair -> ident = ident .)
    SEMI            reduce using rule 71 (pair -> ident = ident .)
    )               reduce using rule 71 (pair -> ident = ident .)
    {               reduce using rule 71 (pair -> ident = ident .)


state 121

    (70) pair -> ident = STRING .

    ,               reduce using rule 70 (pair -> ident = STRING .)
    SEMI            reduce using rule 70 (pair -> ident = STRING .)
    )               reduce using rule 70 (pair -> ident = STRING .)
    {               reduce using rule 70 (pair -> ident = STRING .)


state 122

    (72) pair -> ident = NUMBER .

    ,               reduce using rule 72 (pair -> ident = NUMBER .)
    SEMI            reduce using rule 72 (pair -> ident = NUMBER .)
    )               reduce using rule 72 (pair -> ident = NUMBER .)
    {               reduce using rule 72 (pair -> ident = NUMBER .)


state 123

    (68) pairsx -> pair , pairsx .

    SEMI            reduce using rule 68 (pairsx -> pair , pairsx .)
    )               reduce using rule 68 (pairsx -> pair , pairsx .)
    {               reduce using rule 68 (pairsx -> pair , pairsx .)


state 124

    (24) func_decl -> void ident ( params ) pairs . SEMI
    (27) func_def -> void ident ( params ) pairs . statements
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    SEMI            shift and go to state 181
    {               shift and go to state 115

    statements                     shift and go to state 180

state 125

    (20) decl -> ENUM ( type pairs ) { . type_enums }
    (35) type_enums -> . type_enum type_enums
    (36) type_enums -> . empty
    (37) type_enum -> . ident pairs SEMI
    (2) empty -> .
    (65) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 182
    type_enums                     shift and go to state 183
    type_enum                      shift and go to state 184
    empty                          shift and go to state 185

state 126

    (9) decl -> MACHINE ( idents pairs ) : . params { decls }
    (50) params -> . param , params
    (51) params -> . param
    (52) params -> . empty
    (53) param -> . type ident
    (54) param -> . type STAR ident
    (55) param -> . type STAR ident = STRING
    (56) param -> . type ident = NUMBER
    (57) param -> . type ident = LIT_BOOL
    (58) param -> . type ident = STRING
    (2) empty -> .
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 186
    type                           shift and go to state 72
    typestr                        shift and go to state 19
    empty                          shift and go to state 73

state 127

    (8) decl -> MACHINE ( idents ) : params . { decls }

    {               shift and go to state 187


state 128

    (17) decl -> EXTERN_TYPE ( type pairs ) SEMI .

    PROTOCOL        reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    INCLUDE         reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    MACHINE         reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    ACTION          reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    IN_PORT         reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    OUT_PORT        reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    TRANS           reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    EXTERN_TYPE     reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    GLOBAL          reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    STRUCT          reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    ENUM            reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    STATE_DECL      reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    VOID            reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    IDENT           reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    $end            reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    }               reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)


state 129

    (19) decl -> STRUCT ( type pairs ) { . type_members }
    (29) type_members -> . type_member type_members
    (30) type_members -> . empty
    (31) type_member -> . type_or_void ident ( types ) pairs SEMI
    (32) type_member -> . type_or_void ident ( params ) pairs statements
    (33) type_member -> . type_or_void ident pairs SEMI
    (34) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (48) type_or_void -> . type
    (49) type_or_void -> . void
    (46) type -> . typestr
    (47) void -> . VOID
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    void                           shift and go to state 137
    type_members                   shift and go to state 188
    type_member                    shift and go to state 133
    type                           shift and go to state 135
    type_or_void                   shift and go to state 134
    empty                          shift and go to state 136

state 130

    (21) decl -> STATE_DECL ( type pairs ) { . type_states }
    (38) type_states -> . type_state type_states
    (39) type_states -> . empty
    (40) type_state -> . ident , enumeration pairs SEMI
    (2) empty -> .
    (65) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 189
    type_states                    shift and go to state 190
    type_state                     shift and go to state 191
    empty                          shift and go to state 192

state 131

    (11) decl -> IN_PORT ( ident , type , . var pairs ) statements
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 193
    ident                          shift and go to state 140

state 132

    (18) decl -> GLOBAL ( type pairs ) { type_members . }

    }               shift and go to state 194


state 133

    (29) type_members -> type_member . type_members
    (29) type_members -> . type_member type_members
    (30) type_members -> . empty
    (31) type_member -> . type_or_void ident ( types ) pairs SEMI
    (32) type_member -> . type_or_void ident ( params ) pairs statements
    (33) type_member -> . type_or_void ident pairs SEMI
    (34) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (48) type_or_void -> . type
    (49) type_or_void -> . void
    (46) type -> . typestr
    (47) void -> . VOID
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    void                           shift and go to state 137
    type_members                   shift and go to state 195
    empty                          shift and go to state 136
    type_member                    shift and go to state 133
    type                           shift and go to state 135
    type_or_void                   shift and go to state 134

state 134

    (31) type_member -> type_or_void . ident ( types ) pairs SEMI
    (32) type_member -> type_or_void . ident ( params ) pairs statements
    (33) type_member -> type_or_void . ident pairs SEMI
    (34) type_member -> type_or_void . ident ASSIGN expr SEMI
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 196

state 135

    (48) type_or_void -> type .

    IDENT           reduce using rule 48 (type_or_void -> type .)


state 136

    (30) type_members -> empty .

    }               reduce using rule 30 (type_members -> empty .)


state 137

    (49) type_or_void -> void .

    IDENT           reduce using rule 49 (type_or_void -> void .)


state 138

    (14) decl -> TRANS ( idents , idents ) idents .
    (16) decl -> TRANS ( idents , idents ) idents . idents
    (59) idents -> . { identx }
    (60) idents -> . ident
    (65) ident -> . IDENT

  ! shift/reduce conflict for IDENT resolved as shift
    PROTOCOL        reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    INCLUDE         reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    MACHINE         reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    ACTION          reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    IN_PORT         reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    OUT_PORT        reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    TRANS           reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    EXTERN_TYPE     reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    GLOBAL          reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    STRUCT          reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    ENUM            reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    STATE_DECL      reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    VOID            reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    $end            reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    }               reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    {               shift and go to state 45
    IDENT           shift and go to state 4

  ! IDENT           [ reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .) ]

    ident                          shift and go to state 43
    idents                         shift and go to state 197

state 139

    (13) decl -> TRANS ( idents , idents , ident . ) idents
    (15) decl -> TRANS ( idents , idents , ident . ) idents idents

    )               shift and go to state 198


state 140

    (134) var -> ident .

    )               reduce using rule 134 (var -> ident .)
    ,               reduce using rule 134 (var -> ident .)


state 141

    (12) decl -> OUT_PORT ( ident , type , var . pairs ) SEMI
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 199
    empty                          shift and go to state 51

state 142

    (86) statement -> PEEK . ( var , type pairs ) statements

    (               shift and go to state 200


state 143

    (89) statement -> RETURN . expr SEMI
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 201
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 144

    (131) literal -> FLOATNUMBER .

    DOT             reduce using rule 131 (literal -> FLOATNUMBER .)
    [               reduce using rule 131 (literal -> FLOATNUMBER .)
    STAR            reduce using rule 131 (literal -> FLOATNUMBER .)
    SLASH           reduce using rule 131 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 131 (literal -> FLOATNUMBER .)
    DASH            reduce using rule 131 (literal -> FLOATNUMBER .)
    LT              reduce using rule 131 (literal -> FLOATNUMBER .)
    GT              reduce using rule 131 (literal -> FLOATNUMBER .)
    LE              reduce using rule 131 (literal -> FLOATNUMBER .)
    GE              reduce using rule 131 (literal -> FLOATNUMBER .)
    EQ              reduce using rule 131 (literal -> FLOATNUMBER .)
    NE              reduce using rule 131 (literal -> FLOATNUMBER .)
    AND             reduce using rule 131 (literal -> FLOATNUMBER .)
    OR              reduce using rule 131 (literal -> FLOATNUMBER .)
    RIGHTSHIFT      reduce using rule 131 (literal -> FLOATNUMBER .)
    LEFTSHIFT       reduce using rule 131 (literal -> FLOATNUMBER .)
    SEMI            reduce using rule 131 (literal -> FLOATNUMBER .)
    ASSIGN          reduce using rule 131 (literal -> FLOATNUMBER .)
    )               reduce using rule 131 (literal -> FLOATNUMBER .)
    ,               reduce using rule 131 (literal -> FLOATNUMBER .)
    ]               reduce using rule 131 (literal -> FLOATNUMBER .)


state 145

    (130) literal -> NUMBER .

    DOT             reduce using rule 130 (literal -> NUMBER .)
    [               reduce using rule 130 (literal -> NUMBER .)
    STAR            reduce using rule 130 (literal -> NUMBER .)
    SLASH           reduce using rule 130 (literal -> NUMBER .)
    PLUS            reduce using rule 130 (literal -> NUMBER .)
    DASH            reduce using rule 130 (literal -> NUMBER .)
    LT              reduce using rule 130 (literal -> NUMBER .)
    GT              reduce using rule 130 (literal -> NUMBER .)
    LE              reduce using rule 130 (literal -> NUMBER .)
    GE              reduce using rule 130 (literal -> NUMBER .)
    EQ              reduce using rule 130 (literal -> NUMBER .)
    NE              reduce using rule 130 (literal -> NUMBER .)
    AND             reduce using rule 130 (literal -> NUMBER .)
    OR              reduce using rule 130 (literal -> NUMBER .)
    RIGHTSHIFT      reduce using rule 130 (literal -> NUMBER .)
    LEFTSHIFT       reduce using rule 130 (literal -> NUMBER .)
    SEMI            reduce using rule 130 (literal -> NUMBER .)
    ASSIGN          reduce using rule 130 (literal -> NUMBER .)
    )               reduce using rule 130 (literal -> NUMBER .)
    ,               reduce using rule 130 (literal -> NUMBER .)
    ]               reduce using rule 130 (literal -> NUMBER .)


state 146

    (74) statements -> { statements_inner . }

    }               shift and go to state 202


state 147

    (101) aexpr -> NEW . type
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    type                           shift and go to state 203

state 148

    (107) expr -> aexpr .
    (103) aexpr -> aexpr . DOT ident
    (104) aexpr -> aexpr . DOT ident ( exprs )
    (105) aexpr -> aexpr . [ exprs ]

    STAR            reduce using rule 107 (expr -> aexpr .)
    SLASH           reduce using rule 107 (expr -> aexpr .)
    PLUS            reduce using rule 107 (expr -> aexpr .)
    DASH            reduce using rule 107 (expr -> aexpr .)
    LT              reduce using rule 107 (expr -> aexpr .)
    GT              reduce using rule 107 (expr -> aexpr .)
    LE              reduce using rule 107 (expr -> aexpr .)
    GE              reduce using rule 107 (expr -> aexpr .)
    EQ              reduce using rule 107 (expr -> aexpr .)
    NE              reduce using rule 107 (expr -> aexpr .)
    AND             reduce using rule 107 (expr -> aexpr .)
    OR              reduce using rule 107 (expr -> aexpr .)
    RIGHTSHIFT      reduce using rule 107 (expr -> aexpr .)
    LEFTSHIFT       reduce using rule 107 (expr -> aexpr .)
    SEMI            reduce using rule 107 (expr -> aexpr .)
    ASSIGN          reduce using rule 107 (expr -> aexpr .)
    )               reduce using rule 107 (expr -> aexpr .)
    ,               reduce using rule 107 (expr -> aexpr .)
    ]               reduce using rule 107 (expr -> aexpr .)
    DOT             shift and go to state 205
    [               shift and go to state 204


state 149

    (124) expr -> DECR . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 206
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 150

    (123) expr -> INCR . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 207
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 151

    (94) aexpr -> STATIC_CAST . ( type , expr )
    (95) aexpr -> STATIC_CAST . ( type , STRING , expr )

    (               shift and go to state 208


state 152

    (87) statement -> CHECK_ALLOCATE . ( var ) SEMI

    (               shift and go to state 209


state 153

    (126) aexpr -> ( . expr )
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 210
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 154

    (128) aexpr -> IS_INVALID . ( var )

    (               shift and go to state 211


state 155

    (99) aexpr -> enumeration .

    DOT             reduce using rule 99 (aexpr -> enumeration .)
    [               reduce using rule 99 (aexpr -> enumeration .)
    SEMI            reduce using rule 99 (aexpr -> enumeration .)
    ASSIGN          reduce using rule 99 (aexpr -> enumeration .)
    STAR            reduce using rule 99 (aexpr -> enumeration .)
    SLASH           reduce using rule 99 (aexpr -> enumeration .)
    PLUS            reduce using rule 99 (aexpr -> enumeration .)
    DASH            reduce using rule 99 (aexpr -> enumeration .)
    LT              reduce using rule 99 (aexpr -> enumeration .)
    GT              reduce using rule 99 (aexpr -> enumeration .)
    LE              reduce using rule 99 (aexpr -> enumeration .)
    GE              reduce using rule 99 (aexpr -> enumeration .)
    EQ              reduce using rule 99 (aexpr -> enumeration .)
    NE              reduce using rule 99 (aexpr -> enumeration .)
    AND             reduce using rule 99 (aexpr -> enumeration .)
    OR              reduce using rule 99 (aexpr -> enumeration .)
    RIGHTSHIFT      reduce using rule 99 (aexpr -> enumeration .)
    LEFTSHIFT       reduce using rule 99 (aexpr -> enumeration .)
    )               reduce using rule 99 (aexpr -> enumeration .)
    ,               reduce using rule 99 (aexpr -> enumeration .)
    ]               reduce using rule 99 (aexpr -> enumeration .)


state 156

    (83) statement -> ENQUEUE . ( var , type ) statements
    (84) statement -> ENQUEUE . ( var , type , expr ) statements

    (               shift and go to state 212


state 157

    (76) statements_inner -> statement . statements_inner
    (77) statements_inner -> statement .
    (76) statements_inner -> . statement statements_inner
    (77) statements_inner -> . statement
    (81) statement -> . expr SEMI
    (82) statement -> . expr ASSIGN expr SEMI
    (83) statement -> . ENQUEUE ( var , type ) statements
    (84) statement -> . ENQUEUE ( var , type , expr ) statements
    (85) statement -> . STALL_AND_WAIT ( var , var ) SEMI
    (86) statement -> . PEEK ( var , type pairs ) statements
    (87) statement -> . CHECK_ALLOCATE ( var ) SEMI
    (88) statement -> . CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
    (89) statement -> . RETURN expr SEMI
    (90) statement -> . if_statement
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (91) if_statement -> . IF ( expr ) statements
    (92) if_statement -> . IF ( expr ) statements ELSE statements
    (93) if_statement -> . IF ( expr ) statements ELSE if_statement
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    }               reduce using rule 77 (statements_inner -> statement .)
    ENQUEUE         shift and go to state 156
    STALL_AND_WAIT  shift and go to state 162
    PEEK            shift and go to state 142
    CHECK_ALLOCATE  shift and go to state 152
    CHECK_STOP_SLOTS shift and go to state 171
    RETURN          shift and go to state 143
    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    IF              shift and go to state 165
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 168
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    statements_inner               shift and go to state 213
    statement                      shift and go to state 157
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    if_statement                   shift and go to state 159
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 158

    (96) aexpr -> var .

    DOT             reduce using rule 96 (aexpr -> var .)
    [               reduce using rule 96 (aexpr -> var .)
    SEMI            reduce using rule 96 (aexpr -> var .)
    ASSIGN          reduce using rule 96 (aexpr -> var .)
    STAR            reduce using rule 96 (aexpr -> var .)
    SLASH           reduce using rule 96 (aexpr -> var .)
    PLUS            reduce using rule 96 (aexpr -> var .)
    DASH            reduce using rule 96 (aexpr -> var .)
    LT              reduce using rule 96 (aexpr -> var .)
    GT              reduce using rule 96 (aexpr -> var .)
    LE              reduce using rule 96 (aexpr -> var .)
    GE              reduce using rule 96 (aexpr -> var .)
    EQ              reduce using rule 96 (aexpr -> var .)
    NE              reduce using rule 96 (aexpr -> var .)
    AND             reduce using rule 96 (aexpr -> var .)
    OR              reduce using rule 96 (aexpr -> var .)
    RIGHTSHIFT      reduce using rule 96 (aexpr -> var .)
    LEFTSHIFT       reduce using rule 96 (aexpr -> var .)
    )               reduce using rule 96 (aexpr -> var .)
    ,               reduce using rule 96 (aexpr -> var .)
    ]               reduce using rule 96 (aexpr -> var .)


state 159

    (90) statement -> if_statement .

    ENQUEUE         reduce using rule 90 (statement -> if_statement .)
    STALL_AND_WAIT  reduce using rule 90 (statement -> if_statement .)
    PEEK            reduce using rule 90 (statement -> if_statement .)
    CHECK_ALLOCATE  reduce using rule 90 (statement -> if_statement .)
    CHECK_STOP_SLOTS reduce using rule 90 (statement -> if_statement .)
    RETURN          reduce using rule 90 (statement -> if_statement .)
    NOT             reduce using rule 90 (statement -> if_statement .)
    INCR            reduce using rule 90 (statement -> if_statement .)
    DECR            reduce using rule 90 (statement -> if_statement .)
    DASH            reduce using rule 90 (statement -> if_statement .)
    IF              reduce using rule 90 (statement -> if_statement .)
    STATIC_CAST     reduce using rule 90 (statement -> if_statement .)
    NEW             reduce using rule 90 (statement -> if_statement .)
    OOD             reduce using rule 90 (statement -> if_statement .)
    (               reduce using rule 90 (statement -> if_statement .)
    IS_VALID        reduce using rule 90 (statement -> if_statement .)
    IS_INVALID      reduce using rule 90 (statement -> if_statement .)
    STRING          reduce using rule 90 (statement -> if_statement .)
    NUMBER          reduce using rule 90 (statement -> if_statement .)
    FLOATNUMBER     reduce using rule 90 (statement -> if_statement .)
    LIT_BOOL        reduce using rule 90 (statement -> if_statement .)
    IDENT           reduce using rule 90 (statement -> if_statement .)
    }               reduce using rule 90 (statement -> if_statement .)


state 160

    (97) aexpr -> type . ident
    (106) aexpr -> type . DOUBLE_COLON ident ( exprs )
    (65) ident -> . IDENT

    DOUBLE_COLON    shift and go to state 215
    IDENT           shift and go to state 4

    ident                          shift and go to state 214

state 161

    (129) literal -> STRING .

    DOT             reduce using rule 129 (literal -> STRING .)
    [               reduce using rule 129 (literal -> STRING .)
    STAR            reduce using rule 129 (literal -> STRING .)
    SLASH           reduce using rule 129 (literal -> STRING .)
    PLUS            reduce using rule 129 (literal -> STRING .)
    DASH            reduce using rule 129 (literal -> STRING .)
    LT              reduce using rule 129 (literal -> STRING .)
    GT              reduce using rule 129 (literal -> STRING .)
    LE              reduce using rule 129 (literal -> STRING .)
    GE              reduce using rule 129 (literal -> STRING .)
    EQ              reduce using rule 129 (literal -> STRING .)
    NE              reduce using rule 129 (literal -> STRING .)
    AND             reduce using rule 129 (literal -> STRING .)
    OR              reduce using rule 129 (literal -> STRING .)
    RIGHTSHIFT      reduce using rule 129 (literal -> STRING .)
    LEFTSHIFT       reduce using rule 129 (literal -> STRING .)
    SEMI            reduce using rule 129 (literal -> STRING .)
    ASSIGN          reduce using rule 129 (literal -> STRING .)
    )               reduce using rule 129 (literal -> STRING .)
    ,               reduce using rule 129 (literal -> STRING .)
    ]               reduce using rule 129 (literal -> STRING .)


state 162

    (85) statement -> STALL_AND_WAIT . ( var , var ) SEMI

    (               shift and go to state 216


state 163

    (98) aexpr -> literal .

    DOT             reduce using rule 98 (aexpr -> literal .)
    [               reduce using rule 98 (aexpr -> literal .)
    SEMI            reduce using rule 98 (aexpr -> literal .)
    ASSIGN          reduce using rule 98 (aexpr -> literal .)
    STAR            reduce using rule 98 (aexpr -> literal .)
    SLASH           reduce using rule 98 (aexpr -> literal .)
    PLUS            reduce using rule 98 (aexpr -> literal .)
    DASH            reduce using rule 98 (aexpr -> literal .)
    LT              reduce using rule 98 (aexpr -> literal .)
    GT              reduce using rule 98 (aexpr -> literal .)
    LE              reduce using rule 98 (aexpr -> literal .)
    GE              reduce using rule 98 (aexpr -> literal .)
    EQ              reduce using rule 98 (aexpr -> literal .)
    NE              reduce using rule 98 (aexpr -> literal .)
    AND             reduce using rule 98 (aexpr -> literal .)
    OR              reduce using rule 98 (aexpr -> literal .)
    RIGHTSHIFT      reduce using rule 98 (aexpr -> literal .)
    LEFTSHIFT       reduce using rule 98 (aexpr -> literal .)
    )               reduce using rule 98 (aexpr -> literal .)
    ,               reduce using rule 98 (aexpr -> literal .)
    ]               reduce using rule 98 (aexpr -> literal .)


state 164

    (125) expr -> DASH . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 217
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 165

    (91) if_statement -> IF . ( expr ) statements
    (92) if_statement -> IF . ( expr ) statements ELSE statements
    (93) if_statement -> IF . ( expr ) statements ELSE if_statement

    (               shift and go to state 218


state 166

    (102) aexpr -> OOD .

    DOT             reduce using rule 102 (aexpr -> OOD .)
    [               reduce using rule 102 (aexpr -> OOD .)
    SEMI            reduce using rule 102 (aexpr -> OOD .)
    ASSIGN          reduce using rule 102 (aexpr -> OOD .)
    STAR            reduce using rule 102 (aexpr -> OOD .)
    SLASH           reduce using rule 102 (aexpr -> OOD .)
    PLUS            reduce using rule 102 (aexpr -> OOD .)
    DASH            reduce using rule 102 (aexpr -> OOD .)
    LT              reduce using rule 102 (aexpr -> OOD .)
    GT              reduce using rule 102 (aexpr -> OOD .)
    LE              reduce using rule 102 (aexpr -> OOD .)
    GE              reduce using rule 102 (aexpr -> OOD .)
    EQ              reduce using rule 102 (aexpr -> OOD .)
    NE              reduce using rule 102 (aexpr -> OOD .)
    AND             reduce using rule 102 (aexpr -> OOD .)
    OR              reduce using rule 102 (aexpr -> OOD .)
    RIGHTSHIFT      reduce using rule 102 (aexpr -> OOD .)
    LEFTSHIFT       reduce using rule 102 (aexpr -> OOD .)
    )               reduce using rule 102 (aexpr -> OOD .)
    ,               reduce using rule 102 (aexpr -> OOD .)
    ]               reduce using rule 102 (aexpr -> OOD .)


state 167

    (100) aexpr -> ident . ( exprs )
    (134) var -> ident .
    (133) enumeration -> ident . : ident
    (45) typestr -> ident .

    (               shift and go to state 219
    DOT             reduce using rule 134 (var -> ident .)
    [               reduce using rule 134 (var -> ident .)
    STAR            reduce using rule 134 (var -> ident .)
    SLASH           reduce using rule 134 (var -> ident .)
    PLUS            reduce using rule 134 (var -> ident .)
    DASH            reduce using rule 134 (var -> ident .)
    LT              reduce using rule 134 (var -> ident .)
    GT              reduce using rule 134 (var -> ident .)
    LE              reduce using rule 134 (var -> ident .)
    GE              reduce using rule 134 (var -> ident .)
    EQ              reduce using rule 134 (var -> ident .)
    NE              reduce using rule 134 (var -> ident .)
    AND             reduce using rule 134 (var -> ident .)
    OR              reduce using rule 134 (var -> ident .)
    RIGHTSHIFT      reduce using rule 134 (var -> ident .)
    LEFTSHIFT       reduce using rule 134 (var -> ident .)
    SEMI            reduce using rule 134 (var -> ident .)
    ASSIGN          reduce using rule 134 (var -> ident .)
    )               reduce using rule 134 (var -> ident .)
    ,               reduce using rule 134 (var -> ident .)
    ]               reduce using rule 134 (var -> ident .)
    :               shift and go to state 220
    DOUBLE_COLON    reduce using rule 45 (typestr -> ident .)
    IDENT           reduce using rule 45 (typestr -> ident .)


state 168

    (81) statement -> expr . SEMI
    (82) statement -> expr . ASSIGN expr SEMI
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 225
    ASSIGN          shift and go to state 235
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 169

    (132) literal -> LIT_BOOL .

    DOT             reduce using rule 132 (literal -> LIT_BOOL .)
    [               reduce using rule 132 (literal -> LIT_BOOL .)
    STAR            reduce using rule 132 (literal -> LIT_BOOL .)
    SLASH           reduce using rule 132 (literal -> LIT_BOOL .)
    PLUS            reduce using rule 132 (literal -> LIT_BOOL .)
    DASH            reduce using rule 132 (literal -> LIT_BOOL .)
    LT              reduce using rule 132 (literal -> LIT_BOOL .)
    GT              reduce using rule 132 (literal -> LIT_BOOL .)
    LE              reduce using rule 132 (literal -> LIT_BOOL .)
    GE              reduce using rule 132 (literal -> LIT_BOOL .)
    EQ              reduce using rule 132 (literal -> LIT_BOOL .)
    NE              reduce using rule 132 (literal -> LIT_BOOL .)
    AND             reduce using rule 132 (literal -> LIT_BOOL .)
    OR              reduce using rule 132 (literal -> LIT_BOOL .)
    RIGHTSHIFT      reduce using rule 132 (literal -> LIT_BOOL .)
    LEFTSHIFT       reduce using rule 132 (literal -> LIT_BOOL .)
    SEMI            reduce using rule 132 (literal -> LIT_BOOL .)
    ASSIGN          reduce using rule 132 (literal -> LIT_BOOL .)
    )               reduce using rule 132 (literal -> LIT_BOOL .)
    ,               reduce using rule 132 (literal -> LIT_BOOL .)
    ]               reduce using rule 132 (literal -> LIT_BOOL .)


state 170

    (127) aexpr -> IS_VALID . ( var )

    (               shift and go to state 237


state 171

    (88) statement -> CHECK_STOP_SLOTS . ( var , STRING , STRING ) SEMI

    (               shift and go to state 238


state 172

    (122) expr -> NOT . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 239
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 173

    (75) statements -> { } .

    ENQUEUE         reduce using rule 75 (statements -> { } .)
    STALL_AND_WAIT  reduce using rule 75 (statements -> { } .)
    PEEK            reduce using rule 75 (statements -> { } .)
    CHECK_ALLOCATE  reduce using rule 75 (statements -> { } .)
    CHECK_STOP_SLOTS reduce using rule 75 (statements -> { } .)
    RETURN          reduce using rule 75 (statements -> { } .)
    NOT             reduce using rule 75 (statements -> { } .)
    INCR            reduce using rule 75 (statements -> { } .)
    DECR            reduce using rule 75 (statements -> { } .)
    DASH            reduce using rule 75 (statements -> { } .)
    IF              reduce using rule 75 (statements -> { } .)
    STATIC_CAST     reduce using rule 75 (statements -> { } .)
    NEW             reduce using rule 75 (statements -> { } .)
    OOD             reduce using rule 75 (statements -> { } .)
    (               reduce using rule 75 (statements -> { } .)
    IS_VALID        reduce using rule 75 (statements -> { } .)
    IS_INVALID      reduce using rule 75 (statements -> { } .)
    STRING          reduce using rule 75 (statements -> { } .)
    NUMBER          reduce using rule 75 (statements -> { } .)
    FLOATNUMBER     reduce using rule 75 (statements -> { } .)
    LIT_BOOL        reduce using rule 75 (statements -> { } .)
    IDENT           reduce using rule 75 (statements -> { } .)
    }               reduce using rule 75 (statements -> { } .)
    ELSE            reduce using rule 75 (statements -> { } .)
    PROTOCOL        reduce using rule 75 (statements -> { } .)
    INCLUDE         reduce using rule 75 (statements -> { } .)
    MACHINE         reduce using rule 75 (statements -> { } .)
    ACTION          reduce using rule 75 (statements -> { } .)
    IN_PORT         reduce using rule 75 (statements -> { } .)
    OUT_PORT        reduce using rule 75 (statements -> { } .)
    TRANS           reduce using rule 75 (statements -> { } .)
    EXTERN_TYPE     reduce using rule 75 (statements -> { } .)
    GLOBAL          reduce using rule 75 (statements -> { } .)
    STRUCT          reduce using rule 75 (statements -> { } .)
    ENUM            reduce using rule 75 (statements -> { } .)
    STATE_DECL      reduce using rule 75 (statements -> { } .)
    VOID            reduce using rule 75 (statements -> { } .)
    $end            reduce using rule 75 (statements -> { } .)


state 174

    (28) func_def -> type ident ( params ) pairs statements .

    PROTOCOL        reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    INCLUDE         reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    MACHINE         reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    ACTION          reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    IN_PORT         reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    OUT_PORT        reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    TRANS           reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    EXTERN_TYPE     reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    GLOBAL          reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    STRUCT          reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    ENUM            reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    STATE_DECL      reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    VOID            reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    IDENT           reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    $end            reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)
    }               reduce using rule 28 (func_def -> type ident ( params ) pairs statements .)


state 175

    (25) func_decl -> type ident ( params ) pairs SEMI .

    PROTOCOL        reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    INCLUDE         reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    MACHINE         reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    ACTION          reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    IN_PORT         reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    OUT_PORT        reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    TRANS           reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    GLOBAL          reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    STRUCT          reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    ENUM            reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    STATE_DECL      reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    VOID            reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    IDENT           reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    }               reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)
    $end            reduce using rule 25 (func_decl -> type ident ( params ) pairs SEMI .)


state 176

    (58) param -> type ident = STRING .

    ,               reduce using rule 58 (param -> type ident = STRING .)
    )               reduce using rule 58 (param -> type ident = STRING .)
    {               reduce using rule 58 (param -> type ident = STRING .)


state 177

    (56) param -> type ident = NUMBER .

    ,               reduce using rule 56 (param -> type ident = NUMBER .)
    )               reduce using rule 56 (param -> type ident = NUMBER .)
    {               reduce using rule 56 (param -> type ident = NUMBER .)


state 178

    (57) param -> type ident = LIT_BOOL .

    ,               reduce using rule 57 (param -> type ident = LIT_BOOL .)
    )               reduce using rule 57 (param -> type ident = LIT_BOOL .)
    {               reduce using rule 57 (param -> type ident = LIT_BOOL .)


state 179

    (55) param -> type STAR ident = . STRING

    STRING          shift and go to state 240


state 180

    (27) func_def -> void ident ( params ) pairs statements .

    PROTOCOL        reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    INCLUDE         reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    MACHINE         reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    ACTION          reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    IN_PORT         reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    OUT_PORT        reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    TRANS           reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    EXTERN_TYPE     reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    GLOBAL          reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    STRUCT          reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    ENUM            reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    STATE_DECL      reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    VOID            reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    IDENT           reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    $end            reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)
    }               reduce using rule 27 (func_def -> void ident ( params ) pairs statements .)


state 181

    (24) func_decl -> void ident ( params ) pairs SEMI .

    PROTOCOL        reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    INCLUDE         reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    MACHINE         reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    ACTION          reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    IN_PORT         reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    OUT_PORT        reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    TRANS           reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    GLOBAL          reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    STRUCT          reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    ENUM            reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    STATE_DECL      reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    VOID            reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    IDENT           reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    }               reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)
    $end            reduce using rule 24 (func_decl -> void ident ( params ) pairs SEMI .)


state 182

    (37) type_enum -> ident . pairs SEMI
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 241
    empty                          shift and go to state 51

state 183

    (20) decl -> ENUM ( type pairs ) { type_enums . }

    }               shift and go to state 242


state 184

    (35) type_enums -> type_enum . type_enums
    (35) type_enums -> . type_enum type_enums
    (36) type_enums -> . empty
    (37) type_enum -> . ident pairs SEMI
    (2) empty -> .
    (65) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    type_enum                      shift and go to state 184
    ident                          shift and go to state 182
    empty                          shift and go to state 185
    type_enums                     shift and go to state 243

state 185

    (36) type_enums -> empty .

    }               reduce using rule 36 (type_enums -> empty .)


state 186

    (9) decl -> MACHINE ( idents pairs ) : params . { decls }

    {               shift and go to state 244


state 187

    (8) decl -> MACHINE ( idents ) : params { . decls }
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( idents ) : params { decls }
    (9) decl -> . MACHINE ( idents pairs ) : params { decls }
    (10) decl -> . ACTION ( ident pairs ) statements
    (11) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (12) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (13) decl -> . TRANS ( idents , idents , ident ) idents
    (14) decl -> . TRANS ( idents , idents ) idents
    (15) decl -> . TRANS ( idents , idents , ident ) idents idents
    (16) decl -> . TRANS ( idents , idents ) idents idents
    (17) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (18) decl -> . GLOBAL ( type pairs ) { type_members }
    (19) decl -> . STRUCT ( type pairs ) { type_members }
    (20) decl -> . ENUM ( type pairs ) { type_enums }
    (21) decl -> . STATE_DECL ( type pairs ) { type_states }
    (22) decl -> . type ident pairs SEMI
    (23) decl -> . func_decl
    (26) decl -> . func_def
    (2) empty -> .
    (46) type -> . typestr
    (24) func_decl -> . void ident ( params ) pairs SEMI
    (25) func_decl -> . type ident ( params ) pairs SEMI
    (27) func_def -> . void ident ( params ) pairs statements
    (28) func_def -> . type ident ( params ) pairs statements
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (47) void -> . VOID
    (65) ident -> . IDENT

    PROTOCOL        shift and go to state 13
    INCLUDE         shift and go to state 20
    MACHINE         shift and go to state 17
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 25
    OUT_PORT        shift and go to state 8
    TRANS           shift and go to state 7
    EXTERN_TYPE     shift and go to state 18
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 22
    ENUM            shift and go to state 16
    STATE_DECL      shift and go to state 23
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    declsx                         shift and go to state 12
    func_def                       shift and go to state 14
    void                           shift and go to state 15
    ident                          shift and go to state 21
    func_decl                      shift and go to state 6
    decls                          shift and go to state 245
    type                           shift and go to state 10
    typestr                        shift and go to state 19
    empty                          shift and go to state 11

state 188

    (19) decl -> STRUCT ( type pairs ) { type_members . }

    }               shift and go to state 246


state 189

    (40) type_state -> ident . , enumeration pairs SEMI

    ,               shift and go to state 247


state 190

    (21) decl -> STATE_DECL ( type pairs ) { type_states . }

    }               shift and go to state 248


state 191

    (38) type_states -> type_state . type_states
    (38) type_states -> . type_state type_states
    (39) type_states -> . empty
    (40) type_state -> . ident , enumeration pairs SEMI
    (2) empty -> .
    (65) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 189
    type_states                    shift and go to state 249
    type_state                     shift and go to state 191
    empty                          shift and go to state 192

state 192

    (39) type_states -> empty .

    }               reduce using rule 39 (type_states -> empty .)


state 193

    (11) decl -> IN_PORT ( ident , type , var . pairs ) statements
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 250
    empty                          shift and go to state 51

state 194

    (18) decl -> GLOBAL ( type pairs ) { type_members } .

    PROTOCOL        reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    INCLUDE         reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    MACHINE         reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    ACTION          reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    IN_PORT         reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    OUT_PORT        reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    TRANS           reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    EXTERN_TYPE     reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    GLOBAL          reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    STRUCT          reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    ENUM            reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    STATE_DECL      reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    VOID            reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    IDENT           reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    $end            reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    }               reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)


state 195

    (29) type_members -> type_member type_members .

    }               reduce using rule 29 (type_members -> type_member type_members .)


state 196

    (31) type_member -> type_or_void ident . ( types ) pairs SEMI
    (32) type_member -> type_or_void ident . ( params ) pairs statements
    (33) type_member -> type_or_void ident . pairs SEMI
    (34) type_member -> type_or_void ident . ASSIGN expr SEMI
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    (               shift and go to state 252
    ASSIGN          shift and go to state 253
    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 251
    empty                          shift and go to state 51

state 197

    (16) decl -> TRANS ( idents , idents ) idents idents .

    PROTOCOL        reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    INCLUDE         reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    MACHINE         reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    ACTION          reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    IN_PORT         reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    OUT_PORT        reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    TRANS           reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    EXTERN_TYPE     reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    GLOBAL          reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    STRUCT          reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    ENUM            reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    STATE_DECL      reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    VOID            reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    IDENT           reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    $end            reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    }               reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)


state 198

    (13) decl -> TRANS ( idents , idents , ident ) . idents
    (15) decl -> TRANS ( idents , idents , ident ) . idents idents
    (59) idents -> . { identx }
    (60) idents -> . ident
    (65) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 254

state 199

    (12) decl -> OUT_PORT ( ident , type , var pairs . ) SEMI

    )               shift and go to state 255


state 200

    (86) statement -> PEEK ( . var , type pairs ) statements
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 256
    ident                          shift and go to state 140

state 201

    (89) statement -> RETURN expr . SEMI
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 257
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 202

    (74) statements -> { statements_inner } .

    ENQUEUE         reduce using rule 74 (statements -> { statements_inner } .)
    STALL_AND_WAIT  reduce using rule 74 (statements -> { statements_inner } .)
    PEEK            reduce using rule 74 (statements -> { statements_inner } .)
    CHECK_ALLOCATE  reduce using rule 74 (statements -> { statements_inner } .)
    CHECK_STOP_SLOTS reduce using rule 74 (statements -> { statements_inner } .)
    RETURN          reduce using rule 74 (statements -> { statements_inner } .)
    NOT             reduce using rule 74 (statements -> { statements_inner } .)
    INCR            reduce using rule 74 (statements -> { statements_inner } .)
    DECR            reduce using rule 74 (statements -> { statements_inner } .)
    DASH            reduce using rule 74 (statements -> { statements_inner } .)
    IF              reduce using rule 74 (statements -> { statements_inner } .)
    STATIC_CAST     reduce using rule 74 (statements -> { statements_inner } .)
    NEW             reduce using rule 74 (statements -> { statements_inner } .)
    OOD             reduce using rule 74 (statements -> { statements_inner } .)
    (               reduce using rule 74 (statements -> { statements_inner } .)
    IS_VALID        reduce using rule 74 (statements -> { statements_inner } .)
    IS_INVALID      reduce using rule 74 (statements -> { statements_inner } .)
    STRING          reduce using rule 74 (statements -> { statements_inner } .)
    NUMBER          reduce using rule 74 (statements -> { statements_inner } .)
    FLOATNUMBER     reduce using rule 74 (statements -> { statements_inner } .)
    LIT_BOOL        reduce using rule 74 (statements -> { statements_inner } .)
    IDENT           reduce using rule 74 (statements -> { statements_inner } .)
    }               reduce using rule 74 (statements -> { statements_inner } .)
    ELSE            reduce using rule 74 (statements -> { statements_inner } .)
    PROTOCOL        reduce using rule 74 (statements -> { statements_inner } .)
    INCLUDE         reduce using rule 74 (statements -> { statements_inner } .)
    MACHINE         reduce using rule 74 (statements -> { statements_inner } .)
    ACTION          reduce using rule 74 (statements -> { statements_inner } .)
    IN_PORT         reduce using rule 74 (statements -> { statements_inner } .)
    OUT_PORT        reduce using rule 74 (statements -> { statements_inner } .)
    TRANS           reduce using rule 74 (statements -> { statements_inner } .)
    EXTERN_TYPE     reduce using rule 74 (statements -> { statements_inner } .)
    GLOBAL          reduce using rule 74 (statements -> { statements_inner } .)
    STRUCT          reduce using rule 74 (statements -> { statements_inner } .)
    ENUM            reduce using rule 74 (statements -> { statements_inner } .)
    STATE_DECL      reduce using rule 74 (statements -> { statements_inner } .)
    VOID            reduce using rule 74 (statements -> { statements_inner } .)
    $end            reduce using rule 74 (statements -> { statements_inner } .)


state 203

    (101) aexpr -> NEW type .

    DOT             reduce using rule 101 (aexpr -> NEW type .)
    [               reduce using rule 101 (aexpr -> NEW type .)
    SEMI            reduce using rule 101 (aexpr -> NEW type .)
    ASSIGN          reduce using rule 101 (aexpr -> NEW type .)
    STAR            reduce using rule 101 (aexpr -> NEW type .)
    SLASH           reduce using rule 101 (aexpr -> NEW type .)
    PLUS            reduce using rule 101 (aexpr -> NEW type .)
    DASH            reduce using rule 101 (aexpr -> NEW type .)
    LT              reduce using rule 101 (aexpr -> NEW type .)
    GT              reduce using rule 101 (aexpr -> NEW type .)
    LE              reduce using rule 101 (aexpr -> NEW type .)
    GE              reduce using rule 101 (aexpr -> NEW type .)
    EQ              reduce using rule 101 (aexpr -> NEW type .)
    NE              reduce using rule 101 (aexpr -> NEW type .)
    AND             reduce using rule 101 (aexpr -> NEW type .)
    OR              reduce using rule 101 (aexpr -> NEW type .)
    RIGHTSHIFT      reduce using rule 101 (aexpr -> NEW type .)
    LEFTSHIFT       reduce using rule 101 (aexpr -> NEW type .)
    )               reduce using rule 101 (aexpr -> NEW type .)
    ,               reduce using rule 101 (aexpr -> NEW type .)
    ]               reduce using rule 101 (aexpr -> NEW type .)


state 204

    (105) aexpr -> aexpr [ . exprs ]
    (78) exprs -> . expr , exprs
    (79) exprs -> . expr
    (80) exprs -> . empty
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (2) empty -> .
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    ]               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 259
    enumeration                    shift and go to state 155
    exprs                          shift and go to state 260
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148
    empty                          shift and go to state 258

state 205

    (103) aexpr -> aexpr DOT . ident
    (104) aexpr -> aexpr DOT . ident ( exprs )
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 261

state 206

    (124) expr -> DECR expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 124 (expr -> DECR expr .)
    ASSIGN          reduce using rule 124 (expr -> DECR expr .)
    )               reduce using rule 124 (expr -> DECR expr .)
    ,               reduce using rule 124 (expr -> DECR expr .)
    ]               reduce using rule 124 (expr -> DECR expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 124 (expr -> DECR expr .) ]
  ! SLASH           [ reduce using rule 124 (expr -> DECR expr .) ]
  ! PLUS            [ reduce using rule 124 (expr -> DECR expr .) ]
  ! DASH            [ reduce using rule 124 (expr -> DECR expr .) ]
  ! LT              [ reduce using rule 124 (expr -> DECR expr .) ]
  ! GT              [ reduce using rule 124 (expr -> DECR expr .) ]
  ! LE              [ reduce using rule 124 (expr -> DECR expr .) ]
  ! GE              [ reduce using rule 124 (expr -> DECR expr .) ]
  ! EQ              [ reduce using rule 124 (expr -> DECR expr .) ]
  ! NE              [ reduce using rule 124 (expr -> DECR expr .) ]
  ! AND             [ reduce using rule 124 (expr -> DECR expr .) ]
  ! OR              [ reduce using rule 124 (expr -> DECR expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 124 (expr -> DECR expr .) ]
  ! LEFTSHIFT       [ reduce using rule 124 (expr -> DECR expr .) ]


state 207

    (123) expr -> INCR expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 123 (expr -> INCR expr .)
    ASSIGN          reduce using rule 123 (expr -> INCR expr .)
    )               reduce using rule 123 (expr -> INCR expr .)
    ,               reduce using rule 123 (expr -> INCR expr .)
    ]               reduce using rule 123 (expr -> INCR expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 123 (expr -> INCR expr .) ]
  ! SLASH           [ reduce using rule 123 (expr -> INCR expr .) ]
  ! PLUS            [ reduce using rule 123 (expr -> INCR expr .) ]
  ! DASH            [ reduce using rule 123 (expr -> INCR expr .) ]
  ! LT              [ reduce using rule 123 (expr -> INCR expr .) ]
  ! GT              [ reduce using rule 123 (expr -> INCR expr .) ]
  ! LE              [ reduce using rule 123 (expr -> INCR expr .) ]
  ! GE              [ reduce using rule 123 (expr -> INCR expr .) ]
  ! EQ              [ reduce using rule 123 (expr -> INCR expr .) ]
  ! NE              [ reduce using rule 123 (expr -> INCR expr .) ]
  ! AND             [ reduce using rule 123 (expr -> INCR expr .) ]
  ! OR              [ reduce using rule 123 (expr -> INCR expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 123 (expr -> INCR expr .) ]
  ! LEFTSHIFT       [ reduce using rule 123 (expr -> INCR expr .) ]


state 208

    (94) aexpr -> STATIC_CAST ( . type , expr )
    (95) aexpr -> STATIC_CAST ( . type , STRING , expr )
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    type                           shift and go to state 262

state 209

    (87) statement -> CHECK_ALLOCATE ( . var ) SEMI
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 263
    ident                          shift and go to state 140

state 210

    (126) aexpr -> ( expr . )
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 264
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 211

    (128) aexpr -> IS_INVALID ( . var )
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 265
    ident                          shift and go to state 140

state 212

    (83) statement -> ENQUEUE ( . var , type ) statements
    (84) statement -> ENQUEUE ( . var , type , expr ) statements
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 266
    ident                          shift and go to state 140

state 213

    (76) statements_inner -> statement statements_inner .

    }               reduce using rule 76 (statements_inner -> statement statements_inner .)


state 214

    (97) aexpr -> type ident .

    DOT             reduce using rule 97 (aexpr -> type ident .)
    [               reduce using rule 97 (aexpr -> type ident .)
    SEMI            reduce using rule 97 (aexpr -> type ident .)
    ASSIGN          reduce using rule 97 (aexpr -> type ident .)
    STAR            reduce using rule 97 (aexpr -> type ident .)
    SLASH           reduce using rule 97 (aexpr -> type ident .)
    PLUS            reduce using rule 97 (aexpr -> type ident .)
    DASH            reduce using rule 97 (aexpr -> type ident .)
    LT              reduce using rule 97 (aexpr -> type ident .)
    GT              reduce using rule 97 (aexpr -> type ident .)
    LE              reduce using rule 97 (aexpr -> type ident .)
    GE              reduce using rule 97 (aexpr -> type ident .)
    EQ              reduce using rule 97 (aexpr -> type ident .)
    NE              reduce using rule 97 (aexpr -> type ident .)
    AND             reduce using rule 97 (aexpr -> type ident .)
    OR              reduce using rule 97 (aexpr -> type ident .)
    RIGHTSHIFT      reduce using rule 97 (aexpr -> type ident .)
    LEFTSHIFT       reduce using rule 97 (aexpr -> type ident .)
    )               reduce using rule 97 (aexpr -> type ident .)
    ,               reduce using rule 97 (aexpr -> type ident .)
    ]               reduce using rule 97 (aexpr -> type ident .)


state 215

    (106) aexpr -> type DOUBLE_COLON . ident ( exprs )
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 267

state 216

    (85) statement -> STALL_AND_WAIT ( . var , var ) SEMI
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 268
    ident                          shift and go to state 140

state 217

    (125) expr -> DASH expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    STAR            reduce using rule 125 (expr -> DASH expr .)
    SLASH           reduce using rule 125 (expr -> DASH expr .)
    PLUS            reduce using rule 125 (expr -> DASH expr .)
    DASH            reduce using rule 125 (expr -> DASH expr .)
    LT              reduce using rule 125 (expr -> DASH expr .)
    GT              reduce using rule 125 (expr -> DASH expr .)
    LE              reduce using rule 125 (expr -> DASH expr .)
    GE              reduce using rule 125 (expr -> DASH expr .)
    EQ              reduce using rule 125 (expr -> DASH expr .)
    NE              reduce using rule 125 (expr -> DASH expr .)
    AND             reduce using rule 125 (expr -> DASH expr .)
    OR              reduce using rule 125 (expr -> DASH expr .)
    RIGHTSHIFT      reduce using rule 125 (expr -> DASH expr .)
    LEFTSHIFT       reduce using rule 125 (expr -> DASH expr .)
    SEMI            reduce using rule 125 (expr -> DASH expr .)
    ASSIGN          reduce using rule 125 (expr -> DASH expr .)
    )               reduce using rule 125 (expr -> DASH expr .)
    ,               reduce using rule 125 (expr -> DASH expr .)
    ]               reduce using rule 125 (expr -> DASH expr .)

  ! STAR            [ shift and go to state 224 ]
  ! SLASH           [ shift and go to state 232 ]
  ! PLUS            [ shift and go to state 231 ]
  ! DASH            [ shift and go to state 228 ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]
  ! RIGHTSHIFT      [ shift and go to state 233 ]
  ! LEFTSHIFT       [ shift and go to state 222 ]


state 218

    (91) if_statement -> IF ( . expr ) statements
    (92) if_statement -> IF ( . expr ) statements ELSE statements
    (93) if_statement -> IF ( . expr ) statements ELSE if_statement
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 269
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 219

    (100) aexpr -> ident ( . exprs )
    (78) exprs -> . expr , exprs
    (79) exprs -> . expr
    (80) exprs -> . empty
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (2) empty -> .
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 259
    enumeration                    shift and go to state 155
    exprs                          shift and go to state 270
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148
    empty                          shift and go to state 258

state 220

    (133) enumeration -> ident : . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 271

state 221

    (118) expr -> expr AND . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 272
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 222

    (121) expr -> expr LEFTSHIFT . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 273
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 223

    (113) expr -> expr GT . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 274
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 224

    (108) expr -> expr STAR . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 275
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 225

    (81) statement -> expr SEMI .

    ENQUEUE         reduce using rule 81 (statement -> expr SEMI .)
    STALL_AND_WAIT  reduce using rule 81 (statement -> expr SEMI .)
    PEEK            reduce using rule 81 (statement -> expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 81 (statement -> expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 81 (statement -> expr SEMI .)
    RETURN          reduce using rule 81 (statement -> expr SEMI .)
    NOT             reduce using rule 81 (statement -> expr SEMI .)
    INCR            reduce using rule 81 (statement -> expr SEMI .)
    DECR            reduce using rule 81 (statement -> expr SEMI .)
    DASH            reduce using rule 81 (statement -> expr SEMI .)
    IF              reduce using rule 81 (statement -> expr SEMI .)
    STATIC_CAST     reduce using rule 81 (statement -> expr SEMI .)
    NEW             reduce using rule 81 (statement -> expr SEMI .)
    OOD             reduce using rule 81 (statement -> expr SEMI .)
    (               reduce using rule 81 (statement -> expr SEMI .)
    IS_VALID        reduce using rule 81 (statement -> expr SEMI .)
    IS_INVALID      reduce using rule 81 (statement -> expr SEMI .)
    STRING          reduce using rule 81 (statement -> expr SEMI .)
    NUMBER          reduce using rule 81 (statement -> expr SEMI .)
    FLOATNUMBER     reduce using rule 81 (statement -> expr SEMI .)
    LIT_BOOL        reduce using rule 81 (statement -> expr SEMI .)
    IDENT           reduce using rule 81 (statement -> expr SEMI .)
    }               reduce using rule 81 (statement -> expr SEMI .)


state 226

    (115) expr -> expr GE . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 276
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 227

    (117) expr -> expr NE . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 277
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 228

    (111) expr -> expr DASH . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 278
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 229

    (112) expr -> expr LT . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 279
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 230

    (114) expr -> expr LE . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 280
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 231

    (110) expr -> expr PLUS . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 281
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 232

    (109) expr -> expr SLASH . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 282
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 233

    (120) expr -> expr RIGHTSHIFT . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 283
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 234

    (116) expr -> expr EQ . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 284
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 235

    (82) statement -> expr ASSIGN . expr SEMI
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 285
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 236

    (119) expr -> expr OR . expr
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 286
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 237

    (127) aexpr -> IS_VALID ( . var )
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 287
    ident                          shift and go to state 140

state 238

    (88) statement -> CHECK_STOP_SLOTS ( . var , STRING , STRING ) SEMI
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 288
    ident                          shift and go to state 140

state 239

    (122) expr -> NOT expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    STAR            reduce using rule 122 (expr -> NOT expr .)
    SLASH           reduce using rule 122 (expr -> NOT expr .)
    PLUS            reduce using rule 122 (expr -> NOT expr .)
    DASH            reduce using rule 122 (expr -> NOT expr .)
    LT              reduce using rule 122 (expr -> NOT expr .)
    GT              reduce using rule 122 (expr -> NOT expr .)
    LE              reduce using rule 122 (expr -> NOT expr .)
    GE              reduce using rule 122 (expr -> NOT expr .)
    EQ              reduce using rule 122 (expr -> NOT expr .)
    NE              reduce using rule 122 (expr -> NOT expr .)
    AND             reduce using rule 122 (expr -> NOT expr .)
    OR              reduce using rule 122 (expr -> NOT expr .)
    RIGHTSHIFT      reduce using rule 122 (expr -> NOT expr .)
    LEFTSHIFT       reduce using rule 122 (expr -> NOT expr .)
    SEMI            reduce using rule 122 (expr -> NOT expr .)
    ASSIGN          reduce using rule 122 (expr -> NOT expr .)
    )               reduce using rule 122 (expr -> NOT expr .)
    ,               reduce using rule 122 (expr -> NOT expr .)
    ]               reduce using rule 122 (expr -> NOT expr .)

  ! STAR            [ shift and go to state 224 ]
  ! SLASH           [ shift and go to state 232 ]
  ! PLUS            [ shift and go to state 231 ]
  ! DASH            [ shift and go to state 228 ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]
  ! RIGHTSHIFT      [ shift and go to state 233 ]
  ! LEFTSHIFT       [ shift and go to state 222 ]


state 240

    (55) param -> type STAR ident = STRING .

    ,               reduce using rule 55 (param -> type STAR ident = STRING .)
    )               reduce using rule 55 (param -> type STAR ident = STRING .)
    {               reduce using rule 55 (param -> type STAR ident = STRING .)


state 241

    (37) type_enum -> ident pairs . SEMI

    SEMI            shift and go to state 289


state 242

    (20) decl -> ENUM ( type pairs ) { type_enums } .

    PROTOCOL        reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    INCLUDE         reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    MACHINE         reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    ACTION          reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    IN_PORT         reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    OUT_PORT        reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    TRANS           reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    EXTERN_TYPE     reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    GLOBAL          reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    STRUCT          reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    ENUM            reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    STATE_DECL      reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    VOID            reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    IDENT           reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    $end            reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    }               reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)


state 243

    (35) type_enums -> type_enum type_enums .

    }               reduce using rule 35 (type_enums -> type_enum type_enums .)


state 244

    (9) decl -> MACHINE ( idents pairs ) : params { . decls }
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( idents ) : params { decls }
    (9) decl -> . MACHINE ( idents pairs ) : params { decls }
    (10) decl -> . ACTION ( ident pairs ) statements
    (11) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (12) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (13) decl -> . TRANS ( idents , idents , ident ) idents
    (14) decl -> . TRANS ( idents , idents ) idents
    (15) decl -> . TRANS ( idents , idents , ident ) idents idents
    (16) decl -> . TRANS ( idents , idents ) idents idents
    (17) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (18) decl -> . GLOBAL ( type pairs ) { type_members }
    (19) decl -> . STRUCT ( type pairs ) { type_members }
    (20) decl -> . ENUM ( type pairs ) { type_enums }
    (21) decl -> . STATE_DECL ( type pairs ) { type_states }
    (22) decl -> . type ident pairs SEMI
    (23) decl -> . func_decl
    (26) decl -> . func_def
    (2) empty -> .
    (46) type -> . typestr
    (24) func_decl -> . void ident ( params ) pairs SEMI
    (25) func_decl -> . type ident ( params ) pairs SEMI
    (27) func_def -> . void ident ( params ) pairs statements
    (28) func_def -> . type ident ( params ) pairs statements
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (47) void -> . VOID
    (65) ident -> . IDENT

    PROTOCOL        shift and go to state 13
    INCLUDE         shift and go to state 20
    MACHINE         shift and go to state 17
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 25
    OUT_PORT        shift and go to state 8
    TRANS           shift and go to state 7
    EXTERN_TYPE     shift and go to state 18
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 22
    ENUM            shift and go to state 16
    STATE_DECL      shift and go to state 23
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    declsx                         shift and go to state 12
    func_def                       shift and go to state 14
    void                           shift and go to state 15
    ident                          shift and go to state 21
    func_decl                      shift and go to state 6
    decls                          shift and go to state 290
    type                           shift and go to state 10
    typestr                        shift and go to state 19
    empty                          shift and go to state 11

state 245

    (8) decl -> MACHINE ( idents ) : params { decls . }

    }               shift and go to state 291


state 246

    (19) decl -> STRUCT ( type pairs ) { type_members } .

    PROTOCOL        reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    INCLUDE         reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    MACHINE         reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    ACTION          reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    IN_PORT         reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    OUT_PORT        reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    TRANS           reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    EXTERN_TYPE     reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    GLOBAL          reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    STRUCT          reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    ENUM            reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    STATE_DECL      reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    VOID            reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    IDENT           reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    $end            reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    }               reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)


state 247

    (40) type_state -> ident , . enumeration pairs SEMI
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 292
    enumeration                    shift and go to state 293

state 248

    (21) decl -> STATE_DECL ( type pairs ) { type_states } .

    PROTOCOL        reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    INCLUDE         reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    MACHINE         reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    ACTION          reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    IN_PORT         reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    OUT_PORT        reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    TRANS           reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    EXTERN_TYPE     reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    GLOBAL          reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    STRUCT          reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    ENUM            reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    STATE_DECL      reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    VOID            reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    IDENT           reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    $end            reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    }               reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)


state 249

    (38) type_states -> type_state type_states .

    }               reduce using rule 38 (type_states -> type_state type_states .)


state 250

    (11) decl -> IN_PORT ( ident , type , var pairs . ) statements

    )               shift and go to state 294


state 251

    (33) type_member -> type_or_void ident pairs . SEMI

    SEMI            shift and go to state 295


state 252

    (31) type_member -> type_or_void ident ( . types ) pairs SEMI
    (32) type_member -> type_or_void ident ( . params ) pairs statements
    (41) types -> . type , types
    (42) types -> . type
    (43) types -> . empty
    (50) params -> . param , params
    (51) params -> . param
    (52) params -> . empty
    (46) type -> . typestr
    (2) empty -> .
    (53) param -> . type ident
    (54) param -> . type STAR ident
    (55) param -> . type STAR ident = STRING
    (56) param -> . type ident = NUMBER
    (57) param -> . type ident = LIT_BOOL
    (58) param -> . type ident = STRING
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 296
    empty                          shift and go to state 297
    typestr                        shift and go to state 19
    type                           shift and go to state 298
    types                          shift and go to state 299

state 253

    (34) type_member -> type_or_void ident ASSIGN . expr SEMI
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 300
    enumeration                    shift and go to state 155
    aexpr                          shift and go to state 148
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160

state 254

    (13) decl -> TRANS ( idents , idents , ident ) idents .
    (15) decl -> TRANS ( idents , idents , ident ) idents . idents
    (59) idents -> . { identx }
    (60) idents -> . ident
    (65) ident -> . IDENT

  ! shift/reduce conflict for IDENT resolved as shift
    PROTOCOL        reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    INCLUDE         reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    MACHINE         reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    ACTION          reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    IN_PORT         reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    OUT_PORT        reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    TRANS           reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    EXTERN_TYPE     reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    GLOBAL          reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    STRUCT          reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    ENUM            reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    STATE_DECL      reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    VOID            reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    $end            reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    }               reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .)
    {               shift and go to state 45
    IDENT           shift and go to state 4

  ! IDENT           [ reduce using rule 13 (decl -> TRANS ( idents , idents , ident ) idents .) ]

    ident                          shift and go to state 43
    idents                         shift and go to state 301

state 255

    (12) decl -> OUT_PORT ( ident , type , var pairs ) . SEMI

    SEMI            shift and go to state 302


state 256

    (86) statement -> PEEK ( var . , type pairs ) statements

    ,               shift and go to state 303


state 257

    (89) statement -> RETURN expr SEMI .

    ENQUEUE         reduce using rule 89 (statement -> RETURN expr SEMI .)
    STALL_AND_WAIT  reduce using rule 89 (statement -> RETURN expr SEMI .)
    PEEK            reduce using rule 89 (statement -> RETURN expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 89 (statement -> RETURN expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 89 (statement -> RETURN expr SEMI .)
    RETURN          reduce using rule 89 (statement -> RETURN expr SEMI .)
    NOT             reduce using rule 89 (statement -> RETURN expr SEMI .)
    INCR            reduce using rule 89 (statement -> RETURN expr SEMI .)
    DECR            reduce using rule 89 (statement -> RETURN expr SEMI .)
    DASH            reduce using rule 89 (statement -> RETURN expr SEMI .)
    IF              reduce using rule 89 (statement -> RETURN expr SEMI .)
    STATIC_CAST     reduce using rule 89 (statement -> RETURN expr SEMI .)
    NEW             reduce using rule 89 (statement -> RETURN expr SEMI .)
    OOD             reduce using rule 89 (statement -> RETURN expr SEMI .)
    (               reduce using rule 89 (statement -> RETURN expr SEMI .)
    IS_VALID        reduce using rule 89 (statement -> RETURN expr SEMI .)
    IS_INVALID      reduce using rule 89 (statement -> RETURN expr SEMI .)
    STRING          reduce using rule 89 (statement -> RETURN expr SEMI .)
    NUMBER          reduce using rule 89 (statement -> RETURN expr SEMI .)
    FLOATNUMBER     reduce using rule 89 (statement -> RETURN expr SEMI .)
    LIT_BOOL        reduce using rule 89 (statement -> RETURN expr SEMI .)
    IDENT           reduce using rule 89 (statement -> RETURN expr SEMI .)
    }               reduce using rule 89 (statement -> RETURN expr SEMI .)


state 258

    (80) exprs -> empty .

    ]               reduce using rule 80 (exprs -> empty .)
    )               reduce using rule 80 (exprs -> empty .)


state 259

    (78) exprs -> expr . , exprs
    (79) exprs -> expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    ,               shift and go to state 304
    ]               reduce using rule 79 (exprs -> expr .)
    )               reduce using rule 79 (exprs -> expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 260

    (105) aexpr -> aexpr [ exprs . ]

    ]               shift and go to state 305


state 261

    (103) aexpr -> aexpr DOT ident .
    (104) aexpr -> aexpr DOT ident . ( exprs )

    DOT             reduce using rule 103 (aexpr -> aexpr DOT ident .)
    [               reduce using rule 103 (aexpr -> aexpr DOT ident .)
    SEMI            reduce using rule 103 (aexpr -> aexpr DOT ident .)
    ASSIGN          reduce using rule 103 (aexpr -> aexpr DOT ident .)
    STAR            reduce using rule 103 (aexpr -> aexpr DOT ident .)
    SLASH           reduce using rule 103 (aexpr -> aexpr DOT ident .)
    PLUS            reduce using rule 103 (aexpr -> aexpr DOT ident .)
    DASH            reduce using rule 103 (aexpr -> aexpr DOT ident .)
    LT              reduce using rule 103 (aexpr -> aexpr DOT ident .)
    GT              reduce using rule 103 (aexpr -> aexpr DOT ident .)
    LE              reduce using rule 103 (aexpr -> aexpr DOT ident .)
    GE              reduce using rule 103 (aexpr -> aexpr DOT ident .)
    EQ              reduce using rule 103 (aexpr -> aexpr DOT ident .)
    NE              reduce using rule 103 (aexpr -> aexpr DOT ident .)
    AND             reduce using rule 103 (aexpr -> aexpr DOT ident .)
    OR              reduce using rule 103 (aexpr -> aexpr DOT ident .)
    RIGHTSHIFT      reduce using rule 103 (aexpr -> aexpr DOT ident .)
    LEFTSHIFT       reduce using rule 103 (aexpr -> aexpr DOT ident .)
    )               reduce using rule 103 (aexpr -> aexpr DOT ident .)
    ,               reduce using rule 103 (aexpr -> aexpr DOT ident .)
    ]               reduce using rule 103 (aexpr -> aexpr DOT ident .)
    (               shift and go to state 306


state 262

    (94) aexpr -> STATIC_CAST ( type . , expr )
    (95) aexpr -> STATIC_CAST ( type . , STRING , expr )

    ,               shift and go to state 307


state 263

    (87) statement -> CHECK_ALLOCATE ( var . ) SEMI

    )               shift and go to state 308


state 264

    (126) aexpr -> ( expr ) .

    DOT             reduce using rule 126 (aexpr -> ( expr ) .)
    [               reduce using rule 126 (aexpr -> ( expr ) .)
    SEMI            reduce using rule 126 (aexpr -> ( expr ) .)
    ASSIGN          reduce using rule 126 (aexpr -> ( expr ) .)
    STAR            reduce using rule 126 (aexpr -> ( expr ) .)
    SLASH           reduce using rule 126 (aexpr -> ( expr ) .)
    PLUS            reduce using rule 126 (aexpr -> ( expr ) .)
    DASH            reduce using rule 126 (aexpr -> ( expr ) .)
    LT              reduce using rule 126 (aexpr -> ( expr ) .)
    GT              reduce using rule 126 (aexpr -> ( expr ) .)
    LE              reduce using rule 126 (aexpr -> ( expr ) .)
    GE              reduce using rule 126 (aexpr -> ( expr ) .)
    EQ              reduce using rule 126 (aexpr -> ( expr ) .)
    NE              reduce using rule 126 (aexpr -> ( expr ) .)
    AND             reduce using rule 126 (aexpr -> ( expr ) .)
    OR              reduce using rule 126 (aexpr -> ( expr ) .)
    RIGHTSHIFT      reduce using rule 126 (aexpr -> ( expr ) .)
    LEFTSHIFT       reduce using rule 126 (aexpr -> ( expr ) .)
    )               reduce using rule 126 (aexpr -> ( expr ) .)
    ,               reduce using rule 126 (aexpr -> ( expr ) .)
    ]               reduce using rule 126 (aexpr -> ( expr ) .)


state 265

    (128) aexpr -> IS_INVALID ( var . )

    )               shift and go to state 309


state 266

    (83) statement -> ENQUEUE ( var . , type ) statements
    (84) statement -> ENQUEUE ( var . , type , expr ) statements

    ,               shift and go to state 310


state 267

    (106) aexpr -> type DOUBLE_COLON ident . ( exprs )

    (               shift and go to state 311


state 268

    (85) statement -> STALL_AND_WAIT ( var . , var ) SEMI

    ,               shift and go to state 312


state 269

    (91) if_statement -> IF ( expr . ) statements
    (92) if_statement -> IF ( expr . ) statements ELSE statements
    (93) if_statement -> IF ( expr . ) statements ELSE if_statement
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 313
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 270

    (100) aexpr -> ident ( exprs . )

    )               shift and go to state 314


state 271

    (133) enumeration -> ident : ident .

    DOT             reduce using rule 133 (enumeration -> ident : ident .)
    [               reduce using rule 133 (enumeration -> ident : ident .)
    ,               reduce using rule 133 (enumeration -> ident : ident .)
    STAR            reduce using rule 133 (enumeration -> ident : ident .)
    SLASH           reduce using rule 133 (enumeration -> ident : ident .)
    PLUS            reduce using rule 133 (enumeration -> ident : ident .)
    DASH            reduce using rule 133 (enumeration -> ident : ident .)
    LT              reduce using rule 133 (enumeration -> ident : ident .)
    GT              reduce using rule 133 (enumeration -> ident : ident .)
    LE              reduce using rule 133 (enumeration -> ident : ident .)
    GE              reduce using rule 133 (enumeration -> ident : ident .)
    EQ              reduce using rule 133 (enumeration -> ident : ident .)
    NE              reduce using rule 133 (enumeration -> ident : ident .)
    AND             reduce using rule 133 (enumeration -> ident : ident .)
    OR              reduce using rule 133 (enumeration -> ident : ident .)
    RIGHTSHIFT      reduce using rule 133 (enumeration -> ident : ident .)
    LEFTSHIFT       reduce using rule 133 (enumeration -> ident : ident .)
    )               reduce using rule 133 (enumeration -> ident : ident .)
    SEMI            reduce using rule 133 (enumeration -> ident : ident .)
    ASSIGN          reduce using rule 133 (enumeration -> ident : ident .)
    ]               reduce using rule 133 (enumeration -> ident : ident .)


state 272

    (118) expr -> expr AND expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    AND             reduce using rule 118 (expr -> expr AND expr .)
    OR              reduce using rule 118 (expr -> expr AND expr .)
    SEMI            reduce using rule 118 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 118 (expr -> expr AND expr .)
    )               reduce using rule 118 (expr -> expr AND expr .)
    ,               reduce using rule 118 (expr -> expr AND expr .)
    ]               reduce using rule 118 (expr -> expr AND expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! SLASH           [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! DASH            [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! LEFTSHIFT       [ reduce using rule 118 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]


state 273

    (121) expr -> expr LEFTSHIFT expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    GT              reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    LE              reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    GE              reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    EQ              reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    NE              reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    AND             reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    OR              reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    RIGHTSHIFT      reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    LEFTSHIFT       reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    SEMI            reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    ASSIGN          reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    )               reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    ,               reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    ]               reduce using rule 121 (expr -> expr LEFTSHIFT expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228

  ! STAR            [ reduce using rule 121 (expr -> expr LEFTSHIFT expr .) ]
  ! SLASH           [ reduce using rule 121 (expr -> expr LEFTSHIFT expr .) ]
  ! PLUS            [ reduce using rule 121 (expr -> expr LEFTSHIFT expr .) ]
  ! DASH            [ reduce using rule 121 (expr -> expr LEFTSHIFT expr .) ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]
  ! RIGHTSHIFT      [ shift and go to state 233 ]
  ! LEFTSHIFT       [ shift and go to state 222 ]


state 274

    (113) expr -> expr GT expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 113 (expr -> expr GT expr .)
    GT              reduce using rule 113 (expr -> expr GT expr .)
    LE              reduce using rule 113 (expr -> expr GT expr .)
    GE              reduce using rule 113 (expr -> expr GT expr .)
    EQ              reduce using rule 113 (expr -> expr GT expr .)
    NE              reduce using rule 113 (expr -> expr GT expr .)
    AND             reduce using rule 113 (expr -> expr GT expr .)
    OR              reduce using rule 113 (expr -> expr GT expr .)
    SEMI            reduce using rule 113 (expr -> expr GT expr .)
    ASSIGN          reduce using rule 113 (expr -> expr GT expr .)
    )               reduce using rule 113 (expr -> expr GT expr .)
    ,               reduce using rule 113 (expr -> expr GT expr .)
    ]               reduce using rule 113 (expr -> expr GT expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 113 (expr -> expr GT expr .) ]
  ! SLASH           [ reduce using rule 113 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 113 (expr -> expr GT expr .) ]
  ! DASH            [ reduce using rule 113 (expr -> expr GT expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 113 (expr -> expr GT expr .) ]
  ! LEFTSHIFT       [ reduce using rule 113 (expr -> expr GT expr .) ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]


state 275

    (108) expr -> expr STAR expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    STAR            reduce using rule 108 (expr -> expr STAR expr .)
    SLASH           reduce using rule 108 (expr -> expr STAR expr .)
    PLUS            reduce using rule 108 (expr -> expr STAR expr .)
    DASH            reduce using rule 108 (expr -> expr STAR expr .)
    LT              reduce using rule 108 (expr -> expr STAR expr .)
    GT              reduce using rule 108 (expr -> expr STAR expr .)
    LE              reduce using rule 108 (expr -> expr STAR expr .)
    GE              reduce using rule 108 (expr -> expr STAR expr .)
    EQ              reduce using rule 108 (expr -> expr STAR expr .)
    NE              reduce using rule 108 (expr -> expr STAR expr .)
    AND             reduce using rule 108 (expr -> expr STAR expr .)
    OR              reduce using rule 108 (expr -> expr STAR expr .)
    RIGHTSHIFT      reduce using rule 108 (expr -> expr STAR expr .)
    LEFTSHIFT       reduce using rule 108 (expr -> expr STAR expr .)
    SEMI            reduce using rule 108 (expr -> expr STAR expr .)
    ASSIGN          reduce using rule 108 (expr -> expr STAR expr .)
    )               reduce using rule 108 (expr -> expr STAR expr .)
    ,               reduce using rule 108 (expr -> expr STAR expr .)
    ]               reduce using rule 108 (expr -> expr STAR expr .)

  ! STAR            [ shift and go to state 224 ]
  ! SLASH           [ shift and go to state 232 ]
  ! PLUS            [ shift and go to state 231 ]
  ! DASH            [ shift and go to state 228 ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]
  ! RIGHTSHIFT      [ shift and go to state 233 ]
  ! LEFTSHIFT       [ shift and go to state 222 ]


state 276

    (115) expr -> expr GE expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 115 (expr -> expr GE expr .)
    GT              reduce using rule 115 (expr -> expr GE expr .)
    LE              reduce using rule 115 (expr -> expr GE expr .)
    GE              reduce using rule 115 (expr -> expr GE expr .)
    EQ              reduce using rule 115 (expr -> expr GE expr .)
    NE              reduce using rule 115 (expr -> expr GE expr .)
    AND             reduce using rule 115 (expr -> expr GE expr .)
    OR              reduce using rule 115 (expr -> expr GE expr .)
    SEMI            reduce using rule 115 (expr -> expr GE expr .)
    ASSIGN          reduce using rule 115 (expr -> expr GE expr .)
    )               reduce using rule 115 (expr -> expr GE expr .)
    ,               reduce using rule 115 (expr -> expr GE expr .)
    ]               reduce using rule 115 (expr -> expr GE expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 115 (expr -> expr GE expr .) ]
  ! SLASH           [ reduce using rule 115 (expr -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 115 (expr -> expr GE expr .) ]
  ! DASH            [ reduce using rule 115 (expr -> expr GE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 115 (expr -> expr GE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 115 (expr -> expr GE expr .) ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]


state 277

    (117) expr -> expr NE expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    EQ              reduce using rule 117 (expr -> expr NE expr .)
    NE              reduce using rule 117 (expr -> expr NE expr .)
    AND             reduce using rule 117 (expr -> expr NE expr .)
    OR              reduce using rule 117 (expr -> expr NE expr .)
    SEMI            reduce using rule 117 (expr -> expr NE expr .)
    ASSIGN          reduce using rule 117 (expr -> expr NE expr .)
    )               reduce using rule 117 (expr -> expr NE expr .)
    ,               reduce using rule 117 (expr -> expr NE expr .)
    ]               reduce using rule 117 (expr -> expr NE expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! SLASH           [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! DASH            [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 117 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]


state 278

    (111) expr -> expr DASH expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    PLUS            reduce using rule 111 (expr -> expr DASH expr .)
    DASH            reduce using rule 111 (expr -> expr DASH expr .)
    LT              reduce using rule 111 (expr -> expr DASH expr .)
    GT              reduce using rule 111 (expr -> expr DASH expr .)
    LE              reduce using rule 111 (expr -> expr DASH expr .)
    GE              reduce using rule 111 (expr -> expr DASH expr .)
    EQ              reduce using rule 111 (expr -> expr DASH expr .)
    NE              reduce using rule 111 (expr -> expr DASH expr .)
    AND             reduce using rule 111 (expr -> expr DASH expr .)
    OR              reduce using rule 111 (expr -> expr DASH expr .)
    RIGHTSHIFT      reduce using rule 111 (expr -> expr DASH expr .)
    LEFTSHIFT       reduce using rule 111 (expr -> expr DASH expr .)
    SEMI            reduce using rule 111 (expr -> expr DASH expr .)
    ASSIGN          reduce using rule 111 (expr -> expr DASH expr .)
    )               reduce using rule 111 (expr -> expr DASH expr .)
    ,               reduce using rule 111 (expr -> expr DASH expr .)
    ]               reduce using rule 111 (expr -> expr DASH expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232

  ! STAR            [ reduce using rule 111 (expr -> expr DASH expr .) ]
  ! SLASH           [ reduce using rule 111 (expr -> expr DASH expr .) ]
  ! PLUS            [ shift and go to state 231 ]
  ! DASH            [ shift and go to state 228 ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]
  ! RIGHTSHIFT      [ shift and go to state 233 ]
  ! LEFTSHIFT       [ shift and go to state 222 ]


state 279

    (112) expr -> expr LT expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 112 (expr -> expr LT expr .)
    GT              reduce using rule 112 (expr -> expr LT expr .)
    LE              reduce using rule 112 (expr -> expr LT expr .)
    GE              reduce using rule 112 (expr -> expr LT expr .)
    EQ              reduce using rule 112 (expr -> expr LT expr .)
    NE              reduce using rule 112 (expr -> expr LT expr .)
    AND             reduce using rule 112 (expr -> expr LT expr .)
    OR              reduce using rule 112 (expr -> expr LT expr .)
    SEMI            reduce using rule 112 (expr -> expr LT expr .)
    ASSIGN          reduce using rule 112 (expr -> expr LT expr .)
    )               reduce using rule 112 (expr -> expr LT expr .)
    ,               reduce using rule 112 (expr -> expr LT expr .)
    ]               reduce using rule 112 (expr -> expr LT expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! SLASH           [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! DASH            [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! LEFTSHIFT       [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]


state 280

    (114) expr -> expr LE expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 114 (expr -> expr LE expr .)
    GT              reduce using rule 114 (expr -> expr LE expr .)
    LE              reduce using rule 114 (expr -> expr LE expr .)
    GE              reduce using rule 114 (expr -> expr LE expr .)
    EQ              reduce using rule 114 (expr -> expr LE expr .)
    NE              reduce using rule 114 (expr -> expr LE expr .)
    AND             reduce using rule 114 (expr -> expr LE expr .)
    OR              reduce using rule 114 (expr -> expr LE expr .)
    SEMI            reduce using rule 114 (expr -> expr LE expr .)
    ASSIGN          reduce using rule 114 (expr -> expr LE expr .)
    )               reduce using rule 114 (expr -> expr LE expr .)
    ,               reduce using rule 114 (expr -> expr LE expr .)
    ]               reduce using rule 114 (expr -> expr LE expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! SLASH           [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! DASH            [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]


state 281

    (110) expr -> expr PLUS expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    PLUS            reduce using rule 110 (expr -> expr PLUS expr .)
    DASH            reduce using rule 110 (expr -> expr PLUS expr .)
    LT              reduce using rule 110 (expr -> expr PLUS expr .)
    GT              reduce using rule 110 (expr -> expr PLUS expr .)
    LE              reduce using rule 110 (expr -> expr PLUS expr .)
    GE              reduce using rule 110 (expr -> expr PLUS expr .)
    EQ              reduce using rule 110 (expr -> expr PLUS expr .)
    NE              reduce using rule 110 (expr -> expr PLUS expr .)
    AND             reduce using rule 110 (expr -> expr PLUS expr .)
    OR              reduce using rule 110 (expr -> expr PLUS expr .)
    RIGHTSHIFT      reduce using rule 110 (expr -> expr PLUS expr .)
    LEFTSHIFT       reduce using rule 110 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 110 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 110 (expr -> expr PLUS expr .)
    )               reduce using rule 110 (expr -> expr PLUS expr .)
    ,               reduce using rule 110 (expr -> expr PLUS expr .)
    ]               reduce using rule 110 (expr -> expr PLUS expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232

  ! STAR            [ reduce using rule 110 (expr -> expr PLUS expr .) ]
  ! SLASH           [ reduce using rule 110 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 231 ]
  ! DASH            [ shift and go to state 228 ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]
  ! RIGHTSHIFT      [ shift and go to state 233 ]
  ! LEFTSHIFT       [ shift and go to state 222 ]


state 282

    (109) expr -> expr SLASH expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    STAR            reduce using rule 109 (expr -> expr SLASH expr .)
    SLASH           reduce using rule 109 (expr -> expr SLASH expr .)
    PLUS            reduce using rule 109 (expr -> expr SLASH expr .)
    DASH            reduce using rule 109 (expr -> expr SLASH expr .)
    LT              reduce using rule 109 (expr -> expr SLASH expr .)
    GT              reduce using rule 109 (expr -> expr SLASH expr .)
    LE              reduce using rule 109 (expr -> expr SLASH expr .)
    GE              reduce using rule 109 (expr -> expr SLASH expr .)
    EQ              reduce using rule 109 (expr -> expr SLASH expr .)
    NE              reduce using rule 109 (expr -> expr SLASH expr .)
    AND             reduce using rule 109 (expr -> expr SLASH expr .)
    OR              reduce using rule 109 (expr -> expr SLASH expr .)
    RIGHTSHIFT      reduce using rule 109 (expr -> expr SLASH expr .)
    LEFTSHIFT       reduce using rule 109 (expr -> expr SLASH expr .)
    SEMI            reduce using rule 109 (expr -> expr SLASH expr .)
    ASSIGN          reduce using rule 109 (expr -> expr SLASH expr .)
    )               reduce using rule 109 (expr -> expr SLASH expr .)
    ,               reduce using rule 109 (expr -> expr SLASH expr .)
    ]               reduce using rule 109 (expr -> expr SLASH expr .)

  ! STAR            [ shift and go to state 224 ]
  ! SLASH           [ shift and go to state 232 ]
  ! PLUS            [ shift and go to state 231 ]
  ! DASH            [ shift and go to state 228 ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]
  ! RIGHTSHIFT      [ shift and go to state 233 ]
  ! LEFTSHIFT       [ shift and go to state 222 ]


state 283

    (120) expr -> expr RIGHTSHIFT expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    GT              reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    LE              reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    GE              reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    EQ              reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    NE              reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    AND             reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    OR              reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    RIGHTSHIFT      reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    LEFTSHIFT       reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    SEMI            reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    ASSIGN          reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    )               reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    ,               reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    ]               reduce using rule 120 (expr -> expr RIGHTSHIFT expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228

  ! STAR            [ reduce using rule 120 (expr -> expr RIGHTSHIFT expr .) ]
  ! SLASH           [ reduce using rule 120 (expr -> expr RIGHTSHIFT expr .) ]
  ! PLUS            [ reduce using rule 120 (expr -> expr RIGHTSHIFT expr .) ]
  ! DASH            [ reduce using rule 120 (expr -> expr RIGHTSHIFT expr .) ]
  ! LT              [ shift and go to state 229 ]
  ! GT              [ shift and go to state 223 ]
  ! LE              [ shift and go to state 230 ]
  ! GE              [ shift and go to state 226 ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]
  ! RIGHTSHIFT      [ shift and go to state 233 ]
  ! LEFTSHIFT       [ shift and go to state 222 ]


state 284

    (116) expr -> expr EQ expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    EQ              reduce using rule 116 (expr -> expr EQ expr .)
    NE              reduce using rule 116 (expr -> expr EQ expr .)
    AND             reduce using rule 116 (expr -> expr EQ expr .)
    OR              reduce using rule 116 (expr -> expr EQ expr .)
    SEMI            reduce using rule 116 (expr -> expr EQ expr .)
    ASSIGN          reduce using rule 116 (expr -> expr EQ expr .)
    )               reduce using rule 116 (expr -> expr EQ expr .)
    ,               reduce using rule 116 (expr -> expr EQ expr .)
    ]               reduce using rule 116 (expr -> expr EQ expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! SLASH           [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! DASH            [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! LEFTSHIFT       [ reduce using rule 116 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 234 ]
  ! NE              [ shift and go to state 227 ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]


state 285

    (82) statement -> expr ASSIGN expr . SEMI
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 315
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 286

    (119) expr -> expr OR expr .
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    AND             reduce using rule 119 (expr -> expr OR expr .)
    OR              reduce using rule 119 (expr -> expr OR expr .)
    SEMI            reduce using rule 119 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 119 (expr -> expr OR expr .)
    )               reduce using rule 119 (expr -> expr OR expr .)
    ,               reduce using rule 119 (expr -> expr OR expr .)
    ]               reduce using rule 119 (expr -> expr OR expr .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222

  ! STAR            [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! SLASH           [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! DASH            [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! LEFTSHIFT       [ reduce using rule 119 (expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 221 ]
  ! OR              [ shift and go to state 236 ]


state 287

    (127) aexpr -> IS_VALID ( var . )

    )               shift and go to state 316


state 288

    (88) statement -> CHECK_STOP_SLOTS ( var . , STRING , STRING ) SEMI

    ,               shift and go to state 317


state 289

    (37) type_enum -> ident pairs SEMI .

    IDENT           reduce using rule 37 (type_enum -> ident pairs SEMI .)
    }               reduce using rule 37 (type_enum -> ident pairs SEMI .)


state 290

    (9) decl -> MACHINE ( idents pairs ) : params { decls . }

    }               shift and go to state 318


state 291

    (8) decl -> MACHINE ( idents ) : params { decls } .

    PROTOCOL        reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    INCLUDE         reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    MACHINE         reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    ACTION          reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    IN_PORT         reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    OUT_PORT        reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    TRANS           reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    EXTERN_TYPE     reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    GLOBAL          reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    STRUCT          reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    ENUM            reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    STATE_DECL      reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    VOID            reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    IDENT           reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    $end            reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)
    }               reduce using rule 8 (decl -> MACHINE ( idents ) : params { decls } .)


state 292

    (133) enumeration -> ident . : ident

    :               shift and go to state 220


state 293

    (40) type_state -> ident , enumeration . pairs SEMI
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 319
    empty                          shift and go to state 51

state 294

    (11) decl -> IN_PORT ( ident , type , var pairs ) . statements
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    {               shift and go to state 115

    statements                     shift and go to state 320

state 295

    (33) type_member -> type_or_void ident pairs SEMI .

    VOID            reduce using rule 33 (type_member -> type_or_void ident pairs SEMI .)
    IDENT           reduce using rule 33 (type_member -> type_or_void ident pairs SEMI .)
    }               reduce using rule 33 (type_member -> type_or_void ident pairs SEMI .)


state 296

    (32) type_member -> type_or_void ident ( params . ) pairs statements

    )               shift and go to state 321


state 297

    (43) types -> empty .
    (52) params -> empty .

  ! reduce/reduce conflict for ) resolved using rule 43 (types -> empty .)
    )               reduce using rule 43 (types -> empty .)

  ! )               [ reduce using rule 52 (params -> empty .) ]


state 298

    (41) types -> type . , types
    (42) types -> type .
    (53) param -> type . ident
    (54) param -> type . STAR ident
    (55) param -> type . STAR ident = STRING
    (56) param -> type . ident = NUMBER
    (57) param -> type . ident = LIT_BOOL
    (58) param -> type . ident = STRING
    (65) ident -> . IDENT

    ,               shift and go to state 322
    )               reduce using rule 42 (types -> type .)
    STAR            shift and go to state 97
    IDENT           shift and go to state 4

    ident                          shift and go to state 96

state 299

    (31) type_member -> type_or_void ident ( types . ) pairs SEMI

    )               shift and go to state 323


state 300

    (34) type_member -> type_or_void ident ASSIGN expr . SEMI
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 324
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 301

    (15) decl -> TRANS ( idents , idents , ident ) idents idents .

    PROTOCOL        reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    INCLUDE         reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    MACHINE         reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    ACTION          reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    IN_PORT         reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    OUT_PORT        reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    TRANS           reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    EXTERN_TYPE     reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    GLOBAL          reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    STRUCT          reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    ENUM            reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    STATE_DECL      reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    VOID            reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    IDENT           reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    $end            reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)
    }               reduce using rule 15 (decl -> TRANS ( idents , idents , ident ) idents idents .)


state 302

    (12) decl -> OUT_PORT ( ident , type , var pairs ) SEMI .

    PROTOCOL        reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    INCLUDE         reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    MACHINE         reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    ACTION          reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    IN_PORT         reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    OUT_PORT        reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    TRANS           reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    EXTERN_TYPE     reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    GLOBAL          reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    STRUCT          reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    ENUM            reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    STATE_DECL      reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    VOID            reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    IDENT           reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    $end            reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    }               reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)


state 303

    (86) statement -> PEEK ( var , . type pairs ) statements
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    typestr                        shift and go to state 19
    type                           shift and go to state 325

state 304

    (78) exprs -> expr , . exprs
    (78) exprs -> . expr , exprs
    (79) exprs -> . expr
    (80) exprs -> . empty
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (2) empty -> .
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    ]               reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 259
    enumeration                    shift and go to state 155
    exprs                          shift and go to state 326
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148
    empty                          shift and go to state 258

state 305

    (105) aexpr -> aexpr [ exprs ] .

    DOT             reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    [               reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    SEMI            reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    ASSIGN          reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    STAR            reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    SLASH           reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    PLUS            reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    DASH            reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    LT              reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    GT              reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    LE              reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    GE              reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    EQ              reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    NE              reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    AND             reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    OR              reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    RIGHTSHIFT      reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    LEFTSHIFT       reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    )               reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    ,               reduce using rule 105 (aexpr -> aexpr [ exprs ] .)
    ]               reduce using rule 105 (aexpr -> aexpr [ exprs ] .)


state 306

    (104) aexpr -> aexpr DOT ident ( . exprs )
    (78) exprs -> . expr , exprs
    (79) exprs -> . expr
    (80) exprs -> . empty
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (2) empty -> .
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 259
    enumeration                    shift and go to state 155
    exprs                          shift and go to state 327
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148
    empty                          shift and go to state 258

state 307

    (94) aexpr -> STATIC_CAST ( type , . expr )
    (95) aexpr -> STATIC_CAST ( type , . STRING , expr )
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    STRING          shift and go to state 328
    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 329
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 308

    (87) statement -> CHECK_ALLOCATE ( var ) . SEMI

    SEMI            shift and go to state 330


state 309

    (128) aexpr -> IS_INVALID ( var ) .

    DOT             reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    [               reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    SEMI            reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    ASSIGN          reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    STAR            reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    SLASH           reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    PLUS            reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    DASH            reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    LT              reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    GT              reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    LE              reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    GE              reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    EQ              reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    NE              reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    AND             reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    OR              reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    RIGHTSHIFT      reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    LEFTSHIFT       reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    )               reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    ,               reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)
    ]               reduce using rule 128 (aexpr -> IS_INVALID ( var ) .)


state 310

    (83) statement -> ENQUEUE ( var , . type ) statements
    (84) statement -> ENQUEUE ( var , . type , expr ) statements
    (46) type -> . typestr
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    typestr                        shift and go to state 19
    type                           shift and go to state 331

state 311

    (106) aexpr -> type DOUBLE_COLON ident ( . exprs )
    (78) exprs -> . expr , exprs
    (79) exprs -> . expr
    (80) exprs -> . empty
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (2) empty -> .
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 259
    enumeration                    shift and go to state 155
    exprs                          shift and go to state 332
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148
    empty                          shift and go to state 258

state 312

    (85) statement -> STALL_AND_WAIT ( var , . var ) SEMI
    (134) var -> . ident
    (65) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 333
    ident                          shift and go to state 140

state 313

    (91) if_statement -> IF ( expr ) . statements
    (92) if_statement -> IF ( expr ) . statements ELSE statements
    (93) if_statement -> IF ( expr ) . statements ELSE if_statement
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    {               shift and go to state 115

    statements                     shift and go to state 334

state 314

    (100) aexpr -> ident ( exprs ) .

    DOT             reduce using rule 100 (aexpr -> ident ( exprs ) .)
    [               reduce using rule 100 (aexpr -> ident ( exprs ) .)
    SEMI            reduce using rule 100 (aexpr -> ident ( exprs ) .)
    ASSIGN          reduce using rule 100 (aexpr -> ident ( exprs ) .)
    STAR            reduce using rule 100 (aexpr -> ident ( exprs ) .)
    SLASH           reduce using rule 100 (aexpr -> ident ( exprs ) .)
    PLUS            reduce using rule 100 (aexpr -> ident ( exprs ) .)
    DASH            reduce using rule 100 (aexpr -> ident ( exprs ) .)
    LT              reduce using rule 100 (aexpr -> ident ( exprs ) .)
    GT              reduce using rule 100 (aexpr -> ident ( exprs ) .)
    LE              reduce using rule 100 (aexpr -> ident ( exprs ) .)
    GE              reduce using rule 100 (aexpr -> ident ( exprs ) .)
    EQ              reduce using rule 100 (aexpr -> ident ( exprs ) .)
    NE              reduce using rule 100 (aexpr -> ident ( exprs ) .)
    AND             reduce using rule 100 (aexpr -> ident ( exprs ) .)
    OR              reduce using rule 100 (aexpr -> ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 100 (aexpr -> ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 100 (aexpr -> ident ( exprs ) .)
    )               reduce using rule 100 (aexpr -> ident ( exprs ) .)
    ,               reduce using rule 100 (aexpr -> ident ( exprs ) .)
    ]               reduce using rule 100 (aexpr -> ident ( exprs ) .)


state 315

    (82) statement -> expr ASSIGN expr SEMI .

    ENQUEUE         reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    STALL_AND_WAIT  reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    PEEK            reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    RETURN          reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    NOT             reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    INCR            reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    DECR            reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    DASH            reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    IF              reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    STATIC_CAST     reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    NEW             reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    OOD             reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    (               reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    IS_VALID        reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    IS_INVALID      reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    STRING          reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    NUMBER          reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    FLOATNUMBER     reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    LIT_BOOL        reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    IDENT           reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)
    }               reduce using rule 82 (statement -> expr ASSIGN expr SEMI .)


state 316

    (127) aexpr -> IS_VALID ( var ) .

    DOT             reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    [               reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    SEMI            reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    ASSIGN          reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    STAR            reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    SLASH           reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    PLUS            reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    DASH            reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    LT              reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    GT              reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    LE              reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    GE              reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    EQ              reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    NE              reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    AND             reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    OR              reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    RIGHTSHIFT      reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    LEFTSHIFT       reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    )               reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    ,               reduce using rule 127 (aexpr -> IS_VALID ( var ) .)
    ]               reduce using rule 127 (aexpr -> IS_VALID ( var ) .)


state 317

    (88) statement -> CHECK_STOP_SLOTS ( var , . STRING , STRING ) SEMI

    STRING          shift and go to state 335


state 318

    (9) decl -> MACHINE ( idents pairs ) : params { decls } .

    PROTOCOL        reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    INCLUDE         reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    MACHINE         reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    ACTION          reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    IN_PORT         reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    OUT_PORT        reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    TRANS           reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    EXTERN_TYPE     reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    GLOBAL          reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    STRUCT          reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    ENUM            reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    STATE_DECL      reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    VOID            reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    IDENT           reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    $end            reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)
    }               reduce using rule 9 (decl -> MACHINE ( idents pairs ) : params { decls } .)


state 319

    (40) type_state -> ident , enumeration pairs . SEMI

    SEMI            shift and go to state 336


state 320

    (11) decl -> IN_PORT ( ident , type , var pairs ) statements .

    PROTOCOL        reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    INCLUDE         reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    MACHINE         reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    ACTION          reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    IN_PORT         reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    OUT_PORT        reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    TRANS           reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    EXTERN_TYPE     reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    GLOBAL          reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    STRUCT          reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    ENUM            reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    STATE_DECL      reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    VOID            reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    IDENT           reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    $end            reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    }               reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)


state 321

    (32) type_member -> type_or_void ident ( params ) . pairs statements
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 337
    empty                          shift and go to state 51

state 322

    (41) types -> type , . types
    (41) types -> . type , types
    (42) types -> . type
    (43) types -> . empty
    (46) type -> . typestr
    (2) empty -> .
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident
    (65) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    type                           shift and go to state 339
    empty                          shift and go to state 340
    types                          shift and go to state 338

state 323

    (31) type_member -> type_or_void ident ( types ) . pairs SEMI
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 341
    empty                          shift and go to state 51

state 324

    (34) type_member -> type_or_void ident ASSIGN expr SEMI .

    VOID            reduce using rule 34 (type_member -> type_or_void ident ASSIGN expr SEMI .)
    IDENT           reduce using rule 34 (type_member -> type_or_void ident ASSIGN expr SEMI .)
    }               reduce using rule 34 (type_member -> type_or_void ident ASSIGN expr SEMI .)


state 325

    (86) statement -> PEEK ( var , type . pairs ) statements
    (66) pairs -> . , pairsx
    (67) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 342
    empty                          shift and go to state 51

state 326

    (78) exprs -> expr , exprs .

    ]               reduce using rule 78 (exprs -> expr , exprs .)
    )               reduce using rule 78 (exprs -> expr , exprs .)


state 327

    (104) aexpr -> aexpr DOT ident ( exprs . )

    )               shift and go to state 343


state 328

    (95) aexpr -> STATIC_CAST ( type , STRING . , expr )
    (129) literal -> STRING .

    ,               shift and go to state 344
    DOT             reduce using rule 129 (literal -> STRING .)
    [               reduce using rule 129 (literal -> STRING .)
    )               reduce using rule 129 (literal -> STRING .)
    STAR            reduce using rule 129 (literal -> STRING .)
    SLASH           reduce using rule 129 (literal -> STRING .)
    PLUS            reduce using rule 129 (literal -> STRING .)
    DASH            reduce using rule 129 (literal -> STRING .)
    LT              reduce using rule 129 (literal -> STRING .)
    GT              reduce using rule 129 (literal -> STRING .)
    LE              reduce using rule 129 (literal -> STRING .)
    GE              reduce using rule 129 (literal -> STRING .)
    EQ              reduce using rule 129 (literal -> STRING .)
    NE              reduce using rule 129 (literal -> STRING .)
    AND             reduce using rule 129 (literal -> STRING .)
    OR              reduce using rule 129 (literal -> STRING .)
    RIGHTSHIFT      reduce using rule 129 (literal -> STRING .)
    LEFTSHIFT       reduce using rule 129 (literal -> STRING .)


state 329

    (94) aexpr -> STATIC_CAST ( type , expr . )
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 345
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 330

    (87) statement -> CHECK_ALLOCATE ( var ) SEMI .

    ENQUEUE         reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    PEEK            reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    RETURN          reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NOT             reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    INCR            reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    DECR            reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    DASH            reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IF              reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STATIC_CAST     reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NEW             reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    OOD             reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    (               reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IS_VALID        reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IS_INVALID      reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STRING          reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NUMBER          reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    FLOATNUMBER     reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    LIT_BOOL        reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IDENT           reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    }               reduce using rule 87 (statement -> CHECK_ALLOCATE ( var ) SEMI .)


state 331

    (83) statement -> ENQUEUE ( var , type . ) statements
    (84) statement -> ENQUEUE ( var , type . , expr ) statements

    )               shift and go to state 346
    ,               shift and go to state 347


state 332

    (106) aexpr -> type DOUBLE_COLON ident ( exprs . )

    )               shift and go to state 348


state 333

    (85) statement -> STALL_AND_WAIT ( var , var . ) SEMI

    )               shift and go to state 349


state 334

    (91) if_statement -> IF ( expr ) statements .
    (92) if_statement -> IF ( expr ) statements . ELSE statements
    (93) if_statement -> IF ( expr ) statements . ELSE if_statement

    ENQUEUE         reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    STALL_AND_WAIT  reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    PEEK            reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    CHECK_ALLOCATE  reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    CHECK_STOP_SLOTS reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    RETURN          reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    NOT             reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    INCR            reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    DECR            reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    DASH            reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    IF              reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    STATIC_CAST     reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    NEW             reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    OOD             reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    (               reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    IS_VALID        reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    IS_INVALID      reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    STRING          reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    NUMBER          reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    FLOATNUMBER     reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    LIT_BOOL        reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    IDENT           reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    }               reduce using rule 91 (if_statement -> IF ( expr ) statements .)
    ELSE            shift and go to state 350


state 335

    (88) statement -> CHECK_STOP_SLOTS ( var , STRING . , STRING ) SEMI

    ,               shift and go to state 351


state 336

    (40) type_state -> ident , enumeration pairs SEMI .

    IDENT           reduce using rule 40 (type_state -> ident , enumeration pairs SEMI .)
    }               reduce using rule 40 (type_state -> ident , enumeration pairs SEMI .)


state 337

    (32) type_member -> type_or_void ident ( params ) pairs . statements
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    {               shift and go to state 115

    statements                     shift and go to state 352

state 338

    (41) types -> type , types .

    )               reduce using rule 41 (types -> type , types .)


state 339

    (41) types -> type . , types
    (42) types -> type .

    ,               shift and go to state 322
    )               reduce using rule 42 (types -> type .)


state 340

    (43) types -> empty .

    )               reduce using rule 43 (types -> empty .)


state 341

    (31) type_member -> type_or_void ident ( types ) pairs . SEMI

    SEMI            shift and go to state 353


state 342

    (86) statement -> PEEK ( var , type pairs . ) statements

    )               shift and go to state 354


state 343

    (104) aexpr -> aexpr DOT ident ( exprs ) .

    DOT             reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    [               reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    SEMI            reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    ASSIGN          reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    STAR            reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    SLASH           reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    PLUS            reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    DASH            reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    LT              reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    GT              reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    LE              reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    GE              reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    EQ              reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    NE              reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    AND             reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    OR              reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    )               reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    ,               reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)
    ]               reduce using rule 104 (aexpr -> aexpr DOT ident ( exprs ) .)


state 344

    (95) aexpr -> STATIC_CAST ( type , STRING , . expr )
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 355
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 345

    (94) aexpr -> STATIC_CAST ( type , expr ) .

    DOT             reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    [               reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    SEMI            reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    ASSIGN          reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    STAR            reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    SLASH           reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    PLUS            reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    DASH            reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    LT              reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    GT              reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    LE              reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    GE              reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    EQ              reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    NE              reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    AND             reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    OR              reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    RIGHTSHIFT      reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    LEFTSHIFT       reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    )               reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    ,               reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)
    ]               reduce using rule 94 (aexpr -> STATIC_CAST ( type , expr ) .)


state 346

    (83) statement -> ENQUEUE ( var , type ) . statements
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    {               shift and go to state 115

    statements                     shift and go to state 356

state 347

    (84) statement -> ENQUEUE ( var , type , . expr ) statements
    (107) expr -> . aexpr
    (108) expr -> . expr STAR expr
    (109) expr -> . expr SLASH expr
    (110) expr -> . expr PLUS expr
    (111) expr -> . expr DASH expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GT expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr GE expr
    (116) expr -> . expr EQ expr
    (117) expr -> . expr NE expr
    (118) expr -> . expr AND expr
    (119) expr -> . expr OR expr
    (120) expr -> . expr RIGHTSHIFT expr
    (121) expr -> . expr LEFTSHIFT expr
    (122) expr -> . NOT expr
    (123) expr -> . INCR expr
    (124) expr -> . DECR expr
    (125) expr -> . DASH expr
    (94) aexpr -> . STATIC_CAST ( type , expr )
    (95) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (96) aexpr -> . var
    (97) aexpr -> . type ident
    (98) aexpr -> . literal
    (99) aexpr -> . enumeration
    (100) aexpr -> . ident ( exprs )
    (101) aexpr -> . NEW type
    (102) aexpr -> . OOD
    (103) aexpr -> . aexpr DOT ident
    (104) aexpr -> . aexpr DOT ident ( exprs )
    (105) aexpr -> . aexpr [ exprs ]
    (106) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (126) aexpr -> . ( expr )
    (127) aexpr -> . IS_VALID ( var )
    (128) aexpr -> . IS_INVALID ( var )
    (134) var -> . ident
    (46) type -> . typestr
    (129) literal -> . STRING
    (130) literal -> . NUMBER
    (131) literal -> . FLOATNUMBER
    (132) literal -> . LIT_BOOL
    (133) enumeration -> . ident : ident
    (65) ident -> . IDENT
    (44) typestr -> . typestr DOUBLE_COLON ident
    (45) typestr -> . ident

    NOT             shift and go to state 172
    INCR            shift and go to state 150
    DECR            shift and go to state 149
    DASH            shift and go to state 164
    STATIC_CAST     shift and go to state 151
    NEW             shift and go to state 147
    OOD             shift and go to state 166
    (               shift and go to state 153
    IS_VALID        shift and go to state 170
    IS_INVALID      shift and go to state 154
    STRING          shift and go to state 161
    NUMBER          shift and go to state 145
    FLOATNUMBER     shift and go to state 144
    LIT_BOOL        shift and go to state 169
    IDENT           shift and go to state 4

    ident                          shift and go to state 167
    expr                           shift and go to state 357
    enumeration                    shift and go to state 155
    literal                        shift and go to state 163
    var                            shift and go to state 158
    typestr                        shift and go to state 19
    type                           shift and go to state 160
    aexpr                          shift and go to state 148

state 348

    (106) aexpr -> type DOUBLE_COLON ident ( exprs ) .

    DOT             reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    [               reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    SEMI            reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ASSIGN          reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    STAR            reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    SLASH           reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    PLUS            reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    DASH            reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LT              reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    GT              reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LE              reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    GE              reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    EQ              reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    NE              reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    AND             reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    OR              reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    )               reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ,               reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ]               reduce using rule 106 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)


state 349

    (85) statement -> STALL_AND_WAIT ( var , var ) . SEMI

    SEMI            shift and go to state 358


state 350

    (92) if_statement -> IF ( expr ) statements ELSE . statements
    (93) if_statement -> IF ( expr ) statements ELSE . if_statement
    (74) statements -> . { statements_inner }
    (75) statements -> . { }
    (91) if_statement -> . IF ( expr ) statements
    (92) if_statement -> . IF ( expr ) statements ELSE statements
    (93) if_statement -> . IF ( expr ) statements ELSE if_statement

    {               shift and go to state 115
    IF              shift and go to state 165

    if_statement                   shift and go to state 360
    statements                     shift and go to state 359

state 351

    (88) statement -> CHECK_STOP_SLOTS ( var , STRING , . STRING ) SEMI

    STRING          shift and go to state 361


state 352

    (32) type_member -> type_or_void ident ( params ) pairs statements .

    VOID            reduce using rule 32 (type_member -> type_or_void ident ( params ) pairs statements .)
    IDENT           reduce using rule 32 (type_member -> type_or_void ident ( params ) pairs statements .)
    }               reduce using rule 32 (type_member -> type_or_void ident ( params ) pairs statements .)


state 353

    (31) type_member -> type_or_void ident ( types ) pairs SEMI .

    VOID            reduce using rule 31 (type_member -> type_or_void ident ( types ) pairs SEMI .)
    IDENT           reduce using rule 31 (type_member -> type_or_void ident ( types ) pairs SEMI .)
    }               reduce using rule 31 (type_member -> type_or_void ident ( types ) pairs SEMI .)


state 354

    (86) statement -> PEEK ( var , type pairs ) . statements
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    {               shift and go to state 115

    statements                     shift and go to state 362

state 355

    (95) aexpr -> STATIC_CAST ( type , STRING , expr . )
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 363
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 356

    (83) statement -> ENQUEUE ( var , type ) statements .

    ENQUEUE         reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    STALL_AND_WAIT  reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    PEEK            reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    CHECK_ALLOCATE  reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    CHECK_STOP_SLOTS reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    RETURN          reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    NOT             reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    INCR            reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    DECR            reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    DASH            reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    IF              reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    STATIC_CAST     reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    NEW             reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    OOD             reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    (               reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    IS_VALID        reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    IS_INVALID      reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    STRING          reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    NUMBER          reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    FLOATNUMBER     reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    LIT_BOOL        reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    IDENT           reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)
    }               reduce using rule 83 (statement -> ENQUEUE ( var , type ) statements .)


state 357

    (84) statement -> ENQUEUE ( var , type , expr . ) statements
    (108) expr -> expr . STAR expr
    (109) expr -> expr . SLASH expr
    (110) expr -> expr . PLUS expr
    (111) expr -> expr . DASH expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GT expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . GE expr
    (116) expr -> expr . EQ expr
    (117) expr -> expr . NE expr
    (118) expr -> expr . AND expr
    (119) expr -> expr . OR expr
    (120) expr -> expr . RIGHTSHIFT expr
    (121) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 364
    STAR            shift and go to state 224
    SLASH           shift and go to state 232
    PLUS            shift and go to state 231
    DASH            shift and go to state 228
    LT              shift and go to state 229
    GT              shift and go to state 223
    LE              shift and go to state 230
    GE              shift and go to state 226
    EQ              shift and go to state 234
    NE              shift and go to state 227
    AND             shift and go to state 221
    OR              shift and go to state 236
    RIGHTSHIFT      shift and go to state 233
    LEFTSHIFT       shift and go to state 222


state 358

    (85) statement -> STALL_AND_WAIT ( var , var ) SEMI .

    ENQUEUE         reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    PEEK            reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    RETURN          reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NOT             reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    INCR            reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    DECR            reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    DASH            reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IF              reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STATIC_CAST     reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NEW             reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    OOD             reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    (               reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IS_VALID        reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IS_INVALID      reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STRING          reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NUMBER          reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    FLOATNUMBER     reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    LIT_BOOL        reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IDENT           reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    }               reduce using rule 85 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)


state 359

    (92) if_statement -> IF ( expr ) statements ELSE statements .

    ENQUEUE         reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    STALL_AND_WAIT  reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    PEEK            reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_ALLOCATE  reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_STOP_SLOTS reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    RETURN          reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    NOT             reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    INCR            reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    DECR            reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    DASH            reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    IF              reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    STATIC_CAST     reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    NEW             reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    OOD             reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    (               reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    IS_VALID        reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    IS_INVALID      reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    STRING          reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    NUMBER          reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    FLOATNUMBER     reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    LIT_BOOL        reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    IDENT           reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)
    }               reduce using rule 92 (if_statement -> IF ( expr ) statements ELSE statements .)


state 360

    (93) if_statement -> IF ( expr ) statements ELSE if_statement .

    ENQUEUE         reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STALL_AND_WAIT  reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    PEEK            reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_ALLOCATE  reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_STOP_SLOTS reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    RETURN          reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NOT             reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    INCR            reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    DECR            reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    DASH            reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IF              reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STATIC_CAST     reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NEW             reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    OOD             reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    (               reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IS_VALID        reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IS_INVALID      reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STRING          reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NUMBER          reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    FLOATNUMBER     reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    LIT_BOOL        reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IDENT           reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    }               reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE if_statement .)


state 361

    (88) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING . ) SEMI

    )               shift and go to state 365


state 362

    (86) statement -> PEEK ( var , type pairs ) statements .

    ENQUEUE         reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    STALL_AND_WAIT  reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    PEEK            reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_ALLOCATE  reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_STOP_SLOTS reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    RETURN          reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    NOT             reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    INCR            reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    DECR            reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    DASH            reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    IF              reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    STATIC_CAST     reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    NEW             reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    OOD             reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    (               reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    IS_VALID        reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    IS_INVALID      reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    STRING          reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    NUMBER          reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    FLOATNUMBER     reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    LIT_BOOL        reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    IDENT           reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)
    }               reduce using rule 86 (statement -> PEEK ( var , type pairs ) statements .)


state 363

    (95) aexpr -> STATIC_CAST ( type , STRING , expr ) .

    DOT             reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    [               reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    SEMI            reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ASSIGN          reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    STAR            reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    SLASH           reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    PLUS            reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    DASH            reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LT              reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    GT              reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LE              reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    GE              reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    EQ              reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    NE              reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    AND             reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    OR              reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    RIGHTSHIFT      reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LEFTSHIFT       reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    )               reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ,               reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ]               reduce using rule 95 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)


state 364

    (84) statement -> ENQUEUE ( var , type , expr ) . statements
    (74) statements -> . { statements_inner }
    (75) statements -> . { }

    {               shift and go to state 115

    statements                     shift and go to state 366

state 365

    (88) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) . SEMI

    SEMI            shift and go to state 367


state 366

    (84) statement -> ENQUEUE ( var , type , expr ) statements .

    ENQUEUE         reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    STALL_AND_WAIT  reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    PEEK            reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    CHECK_ALLOCATE  reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    CHECK_STOP_SLOTS reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    RETURN          reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    NOT             reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    INCR            reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    DECR            reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    DASH            reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    IF              reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    STATIC_CAST     reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    NEW             reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    OOD             reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    (               reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    IS_VALID        reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    IS_INVALID      reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    STRING          reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    NUMBER          reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    FLOATNUMBER     reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    LIT_BOOL        reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    IDENT           reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)
    }               reduce using rule 84 (statement -> ENQUEUE ( var , type , expr ) statements .)


state 367

    (88) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .

    ENQUEUE         reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STALL_AND_WAIT  reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    PEEK            reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    RETURN          reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NOT             reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    INCR            reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    DECR            reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    DASH            reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IF              reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STATIC_CAST     reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NEW             reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    OOD             reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    (               reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IS_VALID        reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IS_INVALID      reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STRING          reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NUMBER          reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    FLOATNUMBER     reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    LIT_BOOL        reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IDENT           reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    }               reduce using rule 88 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOUBLE_COLON in state 19 resolved as shift
WARNING: shift/reduce conflict for ) in state 55 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 138 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 254 resolved as shift
WARNING: reduce/reduce conflict in state 297 resolved using rule (types -> empty)
WARNING: rejected rule (params -> empty) in state 297
